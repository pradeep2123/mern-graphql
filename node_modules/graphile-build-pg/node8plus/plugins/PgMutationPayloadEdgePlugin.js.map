{"version":3,"sources":["../../src/plugins/PgMutationPayloadEdgePlugin.js"],"names":["PgMutationPayloadEdgePlugin","builder","pgSimpleCollections","disableIssue397Fix","hook","fields","build","context","extend","getSafeAliasFromResolveInfo","getTypeByName","pgGetGqlTypeByTypeIdAndModifier","pgSql","sql","graphql","GraphQLList","GraphQLNonNull","inflection","pgOmit","omit","describePgEntity","pgField","scope","isMutationPayload","pgIntrospection","pgIntrospectionTable","fieldWithHooks","Self","table","kind","namespace","isSelectable","returnTypeId","typeId","returnsSet","simpleCollections","tags","hasConnections","TableType","type","id","tableTypeName","name","TableOrderByType","orderByType","TableEdgeType","edge","primaryKeyConstraint","primaryKeys","keyAttributes","canOrderBy","fieldName","edgeField","defaultValueEnum","getValues","find","v","description","args","orderBy","defaultValue","value","resolve","data","rawOrderBy","_context","resolveInfo","safeAlias","Array","isArray","order","some","item","alias","filter","__identifiers","__cursor","map","join","isPgMutationPayloadEdgeField","pgFieldIntrospection","withQueryBuilder","queryBuilder","parsedResolveInfoFragment","aliases","expressions","unique","forEach","specs","itemIsUnique","orders","col","_ascending","expr","fragment","getTableAlias","identifier","push","key","length","select","a","literal"],"mappings":"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","sourcesContent":["// @flow\nimport type { Plugin } from \"graphile-build\";\nimport isString from \"lodash/isString\";\n\nexport default (function PgMutationPayloadEdgePlugin(\n  builder,\n  { pgSimpleCollections, disableIssue397Fix }\n) {\n  builder.hook(\n    \"GraphQLObjectType:fields\",\n    (fields, build, context) => {\n      const {\n        extend,\n        getSafeAliasFromResolveInfo,\n        getTypeByName,\n        pgGetGqlTypeByTypeIdAndModifier,\n        pgSql: sql,\n        graphql: { GraphQLList, GraphQLNonNull },\n        inflection,\n        pgOmit: omit,\n        describePgEntity,\n        pgField,\n      } = build;\n      const {\n        scope: { isMutationPayload, pgIntrospection, pgIntrospectionTable },\n        fieldWithHooks,\n        Self,\n      } = context;\n\n      const table = pgIntrospectionTable || pgIntrospection;\n      if (\n        !isMutationPayload ||\n        !table ||\n        table.kind !== \"class\" ||\n        !table.namespace ||\n        !table.isSelectable ||\n        (omit(table, \"all\") && omit(table, \"many\"))\n      ) {\n        return fields;\n      }\n      if (\n        pgIntrospection.kind === \"procedure\" &&\n        (pgIntrospection.returnTypeId !== table.typeId ||\n          pgIntrospection.returnsSet)\n      ) {\n        return fields;\n      }\n      const simpleCollections =\n        table.tags.simpleCollections || pgSimpleCollections;\n      const hasConnections = simpleCollections !== \"only\";\n      if (!hasConnections && !disableIssue397Fix) {\n        return fields;\n      }\n\n      const TableType = pgGetGqlTypeByTypeIdAndModifier(table.type.id, null);\n      const tableTypeName = TableType.name;\n      const TableOrderByType = getTypeByName(\n        inflection.orderByType(tableTypeName)\n      );\n      const TableEdgeType = getTypeByName(inflection.edge(tableTypeName));\n      if (!TableEdgeType) {\n        return fields;\n      }\n\n      const primaryKeyConstraint = table.primaryKeyConstraint;\n      const primaryKeys =\n        primaryKeyConstraint && primaryKeyConstraint.keyAttributes;\n      const canOrderBy = !omit(table, \"order\");\n\n      const fieldName = inflection.edgeField(table);\n      const defaultValueEnum =\n        canOrderBy &&\n        (TableOrderByType.getValues().find(v => v.name === \"PRIMARY_KEY_ASC\") ||\n          TableOrderByType.getValues()[0]);\n      return extend(\n        fields,\n        {\n          [fieldName]: pgField(\n            build,\n            fieldWithHooks,\n            fieldName,\n            {\n              description: `An edge for our \\`${tableTypeName}\\`. May be used by Relay 1.`,\n              type: TableEdgeType,\n              args: canOrderBy\n                ? {\n                    orderBy: {\n                      description: `The method to use when ordering \\`${tableTypeName}\\`.`,\n                      type: new GraphQLList(\n                        new GraphQLNonNull(TableOrderByType)\n                      ),\n                      defaultValue: defaultValueEnum\n                        ? [defaultValueEnum.value]\n                        : null,\n                    },\n                  }\n                : {},\n              resolve(data, { orderBy: rawOrderBy }, _context, resolveInfo) {\n                if (!data.data) {\n                  return null;\n                }\n                const safeAlias = getSafeAliasFromResolveInfo(resolveInfo);\n                const edge = data.data[safeAlias];\n                if (!edge) {\n                  return null;\n                }\n                const orderBy =\n                  canOrderBy && rawOrderBy\n                    ? Array.isArray(rawOrderBy)\n                      ? rawOrderBy\n                      : [rawOrderBy]\n                    : null;\n                const order =\n                  orderBy && orderBy.some(item => item.alias)\n                    ? orderBy.filter(item => item.alias)\n                    : null;\n\n                if (!order) {\n                  if (edge.__identifiers) {\n                    return {\n                      ...edge,\n                      __cursor: [\"primary_key_asc\", edge.__identifiers],\n                    };\n                  } else {\n                    return edge;\n                  }\n                }\n\n                return {\n                  ...edge,\n                  __cursor:\n                    edge[`__order_${order.map(item => item.alias).join(\"__\")}`],\n                };\n              },\n            },\n            {\n              isPgMutationPayloadEdgeField: true,\n              pgFieldIntrospection: table,\n            },\n            false,\n            {\n              withQueryBuilder(queryBuilder, { parsedResolveInfoFragment }) {\n                const {\n                  args: { orderBy: rawOrderBy },\n                } = parsedResolveInfoFragment;\n                const orderBy =\n                  canOrderBy && rawOrderBy\n                    ? Array.isArray(rawOrderBy)\n                      ? rawOrderBy\n                      : [rawOrderBy]\n                    : null;\n                if (orderBy != null) {\n                  const aliases = [];\n                  const expressions = [];\n                  let unique = false;\n                  orderBy.forEach(item => {\n                    const { alias, specs, unique: itemIsUnique } = item;\n                    unique = unique || itemIsUnique;\n                    const orders = Array.isArray(specs[0]) ? specs : [specs];\n                    orders.forEach(([col, _ascending]) => {\n                      if (!col) {\n                        return;\n                      }\n                      const expr = isString(col)\n                        ? sql.fragment`${queryBuilder.getTableAlias()}.${sql.identifier(\n                            col\n                          )}`\n                        : col;\n                      expressions.push(expr);\n                    });\n                    if (alias == null) return;\n                    aliases.push(alias);\n                  });\n                  if (!unique && primaryKeys) {\n                    // Add PKs\n                    primaryKeys.forEach(key => {\n                      expressions.push(\n                        sql.fragment`${queryBuilder.getTableAlias()}.${sql.identifier(\n                          key.name\n                        )}`\n                      );\n                    });\n                  }\n                  if (aliases.length) {\n                    queryBuilder.select(\n                      sql.fragment`json_build_array(${sql.join(\n                        aliases.map(a => sql.fragment`${sql.literal(a)}::text`),\n                        \", \"\n                      )}, json_build_array(${sql.join(expressions, \", \")}))`,\n                      \"__order_\" + aliases.join(\"__\")\n                    );\n                  }\n                }\n              },\n            }\n          ),\n        },\n        `Adding edge field for table ${describePgEntity(\n          table\n        )} to mutation payload '${Self.name}'`\n      );\n    },\n    [\"PgMutationPayloadEdge\"]\n  );\n}: Plugin);\n"],"file":"PgMutationPayloadEdgePlugin.js"}