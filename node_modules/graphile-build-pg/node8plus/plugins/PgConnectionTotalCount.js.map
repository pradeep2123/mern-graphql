{"version":3,"sources":["../../src/plugins/PgConnectionTotalCount.js"],"names":["PgConnectionTotalCount","builder","hook","fields","build","context","extend","inflection","graphql","GraphQLInt","GraphQLNonNull","pgSql","sql","scope","isPgRowConnectionType","pgIntrospection","table","fieldWithHooks","Self","kind","namespace","tableTypeName","tableType","totalCount","addDataGenerator","pgAggregateQuery","aggregateQueryBuilder","select","fragment","description","type","resolve","parent","aggregates","isPgConnectionTotalCountField","name"],"mappings":";;;;;;;IAGyBA,sB,GAAT,SAASA,sBAAT,CAAgCC,OAAhC,EAAyC;AACvDA,EAAAA,OAAO,CAACC,IAAR,CACE,0BADF,EAEE,CAACC,MAAD,EAASC,KAAT,EAAgBC,OAAhB,KAA4B;AAC1B,UAAM;AACJC,MAAAA,MADI;AAEJC,MAAAA,UAFI;AAGJC,MAAAA,OAAO,EAAE;AAAEC,QAAAA,UAAF;AAAcC,QAAAA;AAAd,OAHL;AAIJC,MAAAA,KAAK,EAAEC;AAJH,QAKFR,KALJ;AAMA,UAAM;AACJS,MAAAA,KAAK,EAAE;AAAEC,QAAAA,qBAAF;AAAyBC,QAAAA,eAAe,EAAEC;AAA1C,OADH;AAEJC,MAAAA,cAFI;AAGJC,MAAAA;AAHI,QAIFb,OAJJ;;AAMA,QACE,CAACS,qBAAD,IACA,CAACE,KADD,IAEAA,KAAK,CAACG,IAAN,KAAe,OAFf,IAGA,CAACH,KAAK,CAACI,SAJT,EAKE;AACA,aAAOjB,MAAP;AACD;;AACD,UAAMkB,aAAa,GAAGd,UAAU,CAACe,SAAX,CAAqBN,KAArB,CAAtB;AAEA,WAAOV,MAAM,CACXH,MADW,EAEX;AACEoB,MAAAA,UAAU,EAAEN,cAAc,CACxB,YADwB,EAExB,CAAC;AAAEO,QAAAA;AAAF,OAAD,KAA0B;AACxBA,QAAAA,gBAAgB,CAAC,MAAM;AACrB,iBAAO;AACLC,YAAAA,gBAAgB,EAAEC,qBAAqB,IAAI;AACzCA,cAAAA,qBAAqB,CAACC,MAAtB,CACEf,GAAG,CAACgB,QAAS,UADf,EAEE,YAFF;AAID;AANI,WAAP;AAQD,SATe,CAAhB;AAUA,eAAO;AACLC,UAAAA,WAAW,EAAG,wBAAuBR,aAAc,uCAD9C;AAELS,UAAAA,IAAI,EAAE,IAAIpB,cAAJ,CAAmBD,UAAnB,CAFD;;AAGLsB,UAAAA,OAAO,CAACC,MAAD,EAAS;AACd,mBACGA,MAAM,CAACC,UAAP,IAAqBD,MAAM,CAACC,UAAP,CAAkBV,UAAxC,IAAuD,CADzD;AAGD;;AAPI,SAAP;AASD,OAtBuB,EAuBxB;AACEW,QAAAA,6BAA6B,EAAE;AADjC,OAvBwB;AAD5B,KAFW,EA+BV,oCAAmChB,IAAI,CAACiB,IAAK,GA/BnC,CAAb;AAiCD,GA1DH,EA2DE,CAAC,wBAAD,CA3DF;AA6DD,C","sourcesContent":["// @flow\nimport type { Plugin } from \"graphile-build\";\n\nexport default (function PgConnectionTotalCount(builder) {\n  builder.hook(\n    \"GraphQLObjectType:fields\",\n    (fields, build, context) => {\n      const {\n        extend,\n        inflection,\n        graphql: { GraphQLInt, GraphQLNonNull },\n        pgSql: sql,\n      } = build;\n      const {\n        scope: { isPgRowConnectionType, pgIntrospection: table },\n        fieldWithHooks,\n        Self,\n      } = context;\n\n      if (\n        !isPgRowConnectionType ||\n        !table ||\n        table.kind !== \"class\" ||\n        !table.namespace\n      ) {\n        return fields;\n      }\n      const tableTypeName = inflection.tableType(table);\n\n      return extend(\n        fields,\n        {\n          totalCount: fieldWithHooks(\n            \"totalCount\",\n            ({ addDataGenerator }) => {\n              addDataGenerator(() => {\n                return {\n                  pgAggregateQuery: aggregateQueryBuilder => {\n                    aggregateQueryBuilder.select(\n                      sql.fragment`count(1)`,\n                      \"totalCount\"\n                    );\n                  },\n                };\n              });\n              return {\n                description: `The count of *all* \\`${tableTypeName}\\` you could get from the connection.`,\n                type: new GraphQLNonNull(GraphQLInt),\n                resolve(parent) {\n                  return (\n                    (parent.aggregates && parent.aggregates.totalCount) || 0\n                  );\n                },\n              };\n            },\n            {\n              isPgConnectionTotalCountField: true,\n            }\n          ),\n        },\n        `Adding totalCount to connection '${Self.name}'`\n      );\n    },\n    [\"PgConnectionTotalCount\"]\n  );\n}: Plugin);\n"],"file":"PgConnectionTotalCount.js"}