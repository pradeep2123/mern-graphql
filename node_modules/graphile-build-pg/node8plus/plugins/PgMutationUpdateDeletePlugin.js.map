{"version":3,"sources":["../../src/plugins/PgMutationUpdateDeletePlugin.js"],"names":["debug","PgMutationUpdateDeletePlugin","builder","pgDisableDefaultMutations","hook","fields","build","context","newWithHooks","getNodeIdForTypeAndIdentifiers","getTypeAndIdentifiersFromNodeId","nodeIdFieldName","fieldDataGeneratorsByType","extend","parseResolveInfo","getTypeByName","gql2pg","pgGetGqlTypeByTypeIdAndModifier","pgGetGqlInputTypeByTypeIdAndModifier","pgIntrospectionResultsByKind","introspectionResultsByKind","pgSql","sql","graphql","GraphQLNonNull","GraphQLInputObjectType","GraphQLString","GraphQLObjectType","GraphQLID","pgColumnFilter","inflection","pgQueryFromResolveData","queryFromResolveData","pgOmit","omit","pgViaTemporaryTable","viaTemporaryTable","describePgEntity","sqlCommentByAddingTags","pgField","scope","isRootMutation","fieldWithHooks","reduce","outerMemo","mode","class","memo","table","namespace","canUpdate","isUpdatable","canDelete","isDeletable","TableType","type","id","commonCodeRenameMe","pgClient","resolveInfo","getDataFromParsedResolveInfoFragment","PayloadType","args","condition","resolveContext","input","parsedResolveInfoFragment","resolveData","sqlTypeIdentifier","identifier","name","sqlMutationQuery","sqlColumns","sqlValues","inputData","patchField","tableFieldName","attributes","forEach","attr","fieldName","column","val","push","typeModifier","length","query","join","map","col","i","fragment","modifiedRowAlias","Symbol","rootValue","row","rows","e","Error","pluralize","_singularizedTableName","clientMutationId","data","uniqueConstraints","constraints","filter","con","Table","tableTypeName","TablePatch","patchType","description","tableName","deletedNodeIdFieldName","deletedNodeId","Object","assign","addDataGenerator","fieldDataGeneratorsByTableType","get","gens","gen","resolve","__identifiers","isPgMutationPayloadDeletedNodeIdField","__origin","isMutationPayload","isPgUpdatePayloadType","isPgDeletePayloadType","pgIntrospection","primaryKeyConstraint","primaryKeys","keyAttributes","InputType","isPgUpdateInputType","isPgUpdateNodeInputType","isPgDeleteInputType","isPgDeleteNodeInputType","pgInflection","isMutationInput","parent","nodeId","Type","identifiers","key","idx","isPgNodeMutation","pgFieldIntrospection","constraint","keys","every","_","some","typeId","isPgUpdateByKeysInputType","isPgDeleteByKeysInputType","pgKeys","pgFieldConstraint"],"mappings":"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","sourcesContent":["// @flow\nimport type { Plugin } from \"graphile-build\";\nimport debugFactory from \"debug\";\n\nconst debug = debugFactory(\"graphile-build-pg\");\n\nexport default (async function PgMutationUpdateDeletePlugin(\n  builder,\n  { pgDisableDefaultMutations }\n) {\n  if (pgDisableDefaultMutations) {\n    return;\n  }\n\n  builder.hook(\n    \"GraphQLObjectType:fields\",\n    (fields, build, context) => {\n      const {\n        newWithHooks,\n        getNodeIdForTypeAndIdentifiers,\n        getTypeAndIdentifiersFromNodeId,\n        nodeIdFieldName,\n        fieldDataGeneratorsByType,\n        extend,\n        parseResolveInfo,\n        getTypeByName,\n        gql2pg,\n        pgGetGqlTypeByTypeIdAndModifier,\n        pgGetGqlInputTypeByTypeIdAndModifier,\n        pgIntrospectionResultsByKind: introspectionResultsByKind,\n        pgSql: sql,\n        graphql: {\n          GraphQLNonNull,\n          GraphQLInputObjectType,\n          GraphQLString,\n          GraphQLObjectType,\n          GraphQLID,\n        },\n        pgColumnFilter,\n        inflection,\n        pgQueryFromResolveData: queryFromResolveData,\n        pgOmit: omit,\n        pgViaTemporaryTable: viaTemporaryTable,\n        describePgEntity,\n        sqlCommentByAddingTags,\n        pgField,\n      } = build;\n      const {\n        scope: { isRootMutation },\n        fieldWithHooks,\n      } = context;\n\n      if (!isRootMutation) {\n        return fields;\n      }\n\n      return extend(\n        fields,\n        [\"update\", \"delete\"].reduce(\n          (outerMemo, mode) =>\n            introspectionResultsByKind.class.reduce((memo, table) => {\n              // PERFORMANCE: These used to be .filter(...) calls\n              if (!table.namespace) return memo;\n              const canUpdate =\n                mode === \"update\" &&\n                table.isUpdatable &&\n                !omit(table, \"update\");\n              const canDelete =\n                mode === \"delete\" &&\n                table.isDeletable &&\n                !omit(table, \"delete\");\n              if (!canUpdate && !canDelete) return memo;\n\n              const TableType = pgGetGqlTypeByTypeIdAndModifier(\n                table.type.id,\n                null\n              );\n              if (!TableType) {\n                return memo;\n              }\n              async function commonCodeRenameMe(\n                pgClient,\n                resolveInfo,\n                getDataFromParsedResolveInfoFragment,\n                PayloadType,\n                args,\n                condition,\n                context,\n                resolveContext\n              ) {\n                const { input } = args;\n                const parsedResolveInfoFragment = parseResolveInfo(resolveInfo);\n                parsedResolveInfoFragment.args = args; // Allow overriding via makeWrapResolversPlugin\n                const resolveData = getDataFromParsedResolveInfoFragment(\n                  parsedResolveInfoFragment,\n                  PayloadType\n                );\n\n                const sqlTypeIdentifier = sql.identifier(\n                  table.namespace.name,\n                  table.name\n                );\n\n                let sqlMutationQuery;\n                if (mode === \"update\") {\n                  const sqlColumns = [];\n                  const sqlValues = [];\n                  const inputData =\n                    input[\n                      inflection.patchField(inflection.tableFieldName(table))\n                    ];\n                  table.attributes.forEach(attr => {\n                    // PERFORMANCE: These used to be .filter(...) calls\n                    if (!pgColumnFilter(attr, build, context)) return;\n                    if (omit(attr, \"update\")) return;\n\n                    const fieldName = inflection.column(attr);\n                    if (\n                      fieldName in inputData /* Because we care about null! */\n                    ) {\n                      const val = inputData[fieldName];\n                      sqlColumns.push(sql.identifier(attr.name));\n                      sqlValues.push(gql2pg(val, attr.type, attr.typeModifier));\n                    }\n                  });\n                  if (sqlColumns.length === 0) {\n                    return null;\n                  }\n                  sqlMutationQuery = sql.query`\\\nupdate ${sql.identifier(table.namespace.name, table.name)} set ${sql.join(\n                    sqlColumns.map(\n                      (col, i) => sql.fragment`${col} = ${sqlValues[i]}`\n                    ),\n                    \", \"\n                  )}\nwhere ${condition}\nreturning *`;\n                } else {\n                  sqlMutationQuery = sql.query`\\\ndelete from ${sql.identifier(table.namespace.name, table.name)}\nwhere ${condition}\nreturning *`;\n                }\n\n                const modifiedRowAlias = sql.identifier(Symbol());\n                const query = queryFromResolveData(\n                  modifiedRowAlias,\n                  modifiedRowAlias,\n                  resolveData,\n                  {},\n                  null,\n                  resolveContext,\n                  resolveInfo.rootValue\n                );\n                let row;\n                try {\n                  await pgClient.query(\"SAVEPOINT graphql_mutation\");\n                  const rows = await viaTemporaryTable(\n                    pgClient,\n                    sqlTypeIdentifier,\n                    sqlMutationQuery,\n                    modifiedRowAlias,\n                    query\n                  );\n                  row = rows[0];\n                  await pgClient.query(\"RELEASE SAVEPOINT graphql_mutation\");\n                } catch (e) {\n                  await pgClient.query(\n                    \"ROLLBACK TO SAVEPOINT graphql_mutation\"\n                  );\n                  throw e;\n                }\n                if (!row) {\n                  throw new Error(\n                    `No values were ${mode}d in collection '${inflection.pluralize(\n                      inflection._singularizedTableName(table)\n                    )}' because no values you can ${mode} were found matching these criteria.`\n                  );\n                }\n                return {\n                  clientMutationId: input.clientMutationId,\n                  data: row,\n                };\n              }\n              if (TableType) {\n                const uniqueConstraints = table.constraints.filter(\n                  con => con.type === \"u\" || con.type === \"p\"\n                );\n                const Table = pgGetGqlTypeByTypeIdAndModifier(\n                  table.type.id,\n                  null\n                );\n                const tableTypeName = Table.name;\n                const TablePatch = getTypeByName(\n                  inflection.patchType(Table.name)\n                );\n                const PayloadType = newWithHooks(\n                  GraphQLObjectType,\n                  {\n                    name: inflection[\n                      mode === \"delete\"\n                        ? \"deletePayloadType\"\n                        : \"updatePayloadType\"\n                    ](table),\n                    description: `The output of our ${mode} \\`${tableTypeName}\\` mutation.`,\n                    fields: ({ fieldWithHooks }) => {\n                      const tableName = inflection.tableFieldName(table);\n                      // This should really be `-node-id` but for compatibility with PostGraphQL v3 we haven't made that change.\n                      const deletedNodeIdFieldName = inflection.deletedNodeId(\n                        table\n                      );\n                      return Object.assign(\n                        {\n                          clientMutationId: {\n                            description:\n                              \"The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations.\",\n                            type: GraphQLString,\n                          },\n                          [tableName]: pgField(\n                            build,\n                            fieldWithHooks,\n                            tableName,\n                            {\n                              description: `The \\`${tableTypeName}\\` that was ${mode}d by this mutation.`,\n                              type: Table,\n                            },\n                            {},\n                            false\n                          ),\n                        },\n                        mode === \"delete\"\n                          ? {\n                              [deletedNodeIdFieldName]: fieldWithHooks(\n                                deletedNodeIdFieldName,\n                                ({ addDataGenerator }) => {\n                                  const fieldDataGeneratorsByTableType = fieldDataGeneratorsByType.get(\n                                    TableType\n                                  );\n\n                                  const gens =\n                                    fieldDataGeneratorsByTableType &&\n                                    fieldDataGeneratorsByTableType[\n                                      nodeIdFieldName\n                                    ];\n                                  if (gens) {\n                                    gens.forEach(gen => addDataGenerator(gen));\n                                  }\n                                  return {\n                                    type: GraphQLID,\n                                    resolve(data) {\n                                      return (\n                                        data.data.__identifiers &&\n                                        getNodeIdForTypeAndIdentifiers(\n                                          Table,\n                                          ...data.data.__identifiers\n                                        )\n                                      );\n                                    },\n                                  };\n                                },\n                                {\n                                  isPgMutationPayloadDeletedNodeIdField: true,\n                                }\n                              ),\n                            }\n                          : null\n                      );\n                    },\n                  },\n                  {\n                    __origin: `Adding table ${mode} mutation payload type for ${describePgEntity(\n                      table\n                    )}. You can rename the table's GraphQL type via a 'Smart Comment':\\n\\n  ${sqlCommentByAddingTags(\n                      table,\n                      {\n                        name: \"newNameHere\",\n                      }\n                    )}`,\n                    isMutationPayload: true,\n                    isPgUpdatePayloadType: mode === \"update\",\n                    isPgDeletePayloadType: mode === \"delete\",\n                    pgIntrospection: table,\n                  }\n                );\n\n                // NodeId\n                const primaryKeyConstraint = table.primaryKeyConstraint;\n                if (nodeIdFieldName && primaryKeyConstraint) {\n                  const primaryKeys =\n                    primaryKeyConstraint && primaryKeyConstraint.keyAttributes;\n                  const fieldName = inflection[\n                    mode === \"update\" ? \"updateNode\" : \"deleteNode\"\n                  ](table);\n                  const InputType = newWithHooks(\n                    GraphQLInputObjectType,\n                    {\n                      description: `All input for the \\`${fieldName}\\` mutation.`,\n                      name: inflection[\n                        mode === \"update\"\n                          ? \"updateNodeInputType\"\n                          : \"deleteNodeInputType\"\n                      ](table),\n                      fields: Object.assign(\n                        {\n                          clientMutationId: {\n                            description:\n                              \"An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client.\",\n                            type: GraphQLString,\n                          },\n                          [nodeIdFieldName]: {\n                            description: `The globally unique \\`ID\\` which will identify a single \\`${tableTypeName}\\` to be ${mode}d.`,\n                            type: new GraphQLNonNull(GraphQLID),\n                          },\n                        },\n                        mode === \"update\"\n                          ? {\n                              [inflection.patchField(\n                                inflection.tableFieldName(table)\n                              )]: {\n                                description: `An object where the defined keys will be set on the \\`${tableTypeName}\\` being ${mode}d.`,\n                                type: new GraphQLNonNull(TablePatch),\n                              },\n                            }\n                          : null\n                      ),\n                    },\n                    {\n                      __origin: `Adding table ${mode} (by node ID) mutation input type for ${describePgEntity(\n                        table\n                      )}. You can rename the table's GraphQL type via a 'Smart Comment':\\n\\n  ${sqlCommentByAddingTags(\n                        table,\n                        {\n                          name: \"newNameHere\",\n                        }\n                      )}`,\n                      isPgUpdateInputType: mode === \"update\",\n                      isPgUpdateNodeInputType: mode === \"update\",\n                      isPgDeleteInputType: mode === \"delete\",\n                      isPgDeleteNodeInputType: mode === \"delete\",\n                      pgInflection: table, // TODO:v5: remove - TYPO!\n                      pgIntrospection: table,\n                      isMutationInput: true,\n                    }\n                  );\n\n                  memo = extend(\n                    memo,\n                    {\n                      [fieldName]: fieldWithHooks(\n                        fieldName,\n                        context => {\n                          const {\n                            getDataFromParsedResolveInfoFragment,\n                          } = context;\n                          return {\n                            description:\n                              mode === \"update\"\n                                ? `Updates a single \\`${tableTypeName}\\` using its globally unique id and a patch.`\n                                : `Deletes a single \\`${tableTypeName}\\` using its globally unique id.`,\n                            type: PayloadType,\n                            args: {\n                              input: {\n                                type: new GraphQLNonNull(InputType),\n                              },\n                            },\n                            async resolve(\n                              parent,\n                              args,\n                              resolveContext,\n                              resolveInfo\n                            ) {\n                              const { input } = args;\n                              const { pgClient } = resolveContext;\n                              const nodeId = input[nodeIdFieldName];\n                              try {\n                                const {\n                                  Type,\n                                  identifiers,\n                                } = getTypeAndIdentifiersFromNodeId(nodeId);\n                                if (Type !== TableType) {\n                                  throw new Error(\"Mismatched type\");\n                                }\n                                if (identifiers.length !== primaryKeys.length) {\n                                  throw new Error(\"Invalid ID\");\n                                }\n\n                                return commonCodeRenameMe(\n                                  pgClient,\n                                  resolveInfo,\n                                  getDataFromParsedResolveInfoFragment,\n                                  PayloadType,\n                                  args,\n                                  sql.fragment`(${sql.join(\n                                    primaryKeys.map(\n                                      (key, idx) =>\n                                        sql.fragment`${sql.identifier(\n                                          key.name\n                                        )} = ${gql2pg(\n                                          identifiers[idx],\n                                          key.type,\n                                          key.typeModifier\n                                        )}`\n                                    ),\n                                    \") and (\"\n                                  )})`,\n                                  context,\n                                  resolveContext\n                                );\n                              } catch (e) {\n                                debug(e);\n                                return null;\n                              }\n                            },\n                          };\n                        },\n                        {\n                          isPgNodeMutation: true,\n                          pgFieldIntrospection: table,\n                          [mode === \"update\"\n                            ? \"isPgUpdateMutationField\"\n                            : \"isPgDeleteMutationField\"]: true,\n                        }\n                      ),\n                    },\n                    \"Adding ${mode} mutation for ${describePgEntity(table)}\"\n                  );\n                }\n\n                // Unique\n                uniqueConstraints.forEach(constraint => {\n                  if (omit(constraint, mode)) {\n                    return;\n                  }\n                  const keys = constraint.keyAttributes;\n                  if (!keys.every(_ => _)) {\n                    throw new Error(\n                      `Consistency error: could not find an attribute in the constraint when building the ${mode} mutation for ${describePgEntity(\n                        table\n                      )}!`\n                    );\n                  }\n                  if (keys.some(key => omit(key, \"read\"))) {\n                    return;\n                  }\n                  const fieldName = inflection[\n                    mode === \"update\" ? \"updateByKeys\" : \"deleteByKeys\"\n                  ](keys, table, constraint);\n                  const InputType = newWithHooks(\n                    GraphQLInputObjectType,\n                    {\n                      description: `All input for the \\`${fieldName}\\` mutation.`,\n                      name: inflection[\n                        mode === \"update\"\n                          ? \"updateByKeysInputType\"\n                          : \"deleteByKeysInputType\"\n                      ](keys, table, constraint),\n                      fields: Object.assign(\n                        {\n                          clientMutationId: {\n                            type: GraphQLString,\n                          },\n                        },\n                        mode === \"update\"\n                          ? {\n                              [inflection.patchField(\n                                inflection.tableFieldName(table)\n                              )]: {\n                                description: `An object where the defined keys will be set on the \\`${tableTypeName}\\` being ${mode}d.`,\n                                type: new GraphQLNonNull(TablePatch),\n                              },\n                            }\n                          : null,\n                        keys.reduce((memo, key) => {\n                          memo[inflection.column(key)] = {\n                            description: key.description,\n                            type: new GraphQLNonNull(\n                              pgGetGqlInputTypeByTypeIdAndModifier(\n                                key.typeId,\n                                key.typeModifier\n                              )\n                            ),\n                          };\n                          return memo;\n                        }, {})\n                      ),\n                    },\n                    {\n                      __origin: `Adding table ${mode} mutation input type for ${describePgEntity(\n                        constraint\n                      )}. You can rename the table's GraphQL type via a 'Smart Comment':\\n\\n  ${sqlCommentByAddingTags(\n                        table,\n                        {\n                          name: \"newNameHere\",\n                        }\n                      )}`,\n                      isPgUpdateInputType: mode === \"update\",\n                      isPgUpdateByKeysInputType: mode === \"update\",\n                      isPgDeleteInputType: mode === \"delete\",\n                      isPgDeleteByKeysInputType: mode === \"delete\",\n                      pgInflection: table, // TODO:v5: remove - TYPO!\n                      pgIntrospection: table,\n                      pgKeys: keys,\n                      isMutationInput: true,\n                    }\n                  );\n\n                  memo = extend(\n                    memo,\n                    {\n                      [fieldName]: fieldWithHooks(\n                        fieldName,\n                        context => {\n                          const {\n                            getDataFromParsedResolveInfoFragment,\n                          } = context;\n                          return {\n                            description:\n                              mode === \"update\"\n                                ? `Updates a single \\`${tableTypeName}\\` using a unique key and a patch.`\n                                : `Deletes a single \\`${tableTypeName}\\` using a unique key.`,\n                            type: PayloadType,\n                            args: {\n                              input: {\n                                type: new GraphQLNonNull(InputType),\n                              },\n                            },\n                            async resolve(\n                              parent,\n                              args,\n                              resolveContext,\n                              resolveInfo\n                            ) {\n                              const { input } = args;\n                              const { pgClient } = resolveContext;\n                              return commonCodeRenameMe(\n                                pgClient,\n                                resolveInfo,\n                                getDataFromParsedResolveInfoFragment,\n                                PayloadType,\n                                args,\n                                sql.fragment`(${sql.join(\n                                  keys.map(\n                                    key =>\n                                      sql.fragment`${sql.identifier(\n                                        key.name\n                                      )} = ${gql2pg(\n                                        input[inflection.column(key)],\n                                        key.type,\n                                        key.typeModifier\n                                      )}`\n                                  ),\n                                  \") and (\"\n                                )})`,\n                                context,\n                                resolveContext\n                              );\n                            },\n                          };\n                        },\n                        {\n                          isPgNodeMutation: false,\n                          pgFieldIntrospection: table,\n                          pgFieldConstraint: constraint,\n                          [mode === \"update\"\n                            ? \"isPgUpdateMutationField\"\n                            : \"isPgDeleteMutationField\"]: true,\n                        }\n                      ),\n                    },\n                    `Adding ${mode} mutation for ${describePgEntity(\n                      constraint\n                    )}`\n                  );\n                });\n              }\n              return memo;\n            }, outerMemo),\n          {}\n        ),\n        `Adding default update/delete mutations to root Mutation type`\n      );\n    },\n    [\"PgMutationUpdateDelete\"]\n  );\n}: Plugin);\n"],"file":"PgMutationUpdateDeletePlugin.js"}