{
  "_args": [
    [
      {
        "raw": "postgraphile-core@4.4.5",
        "scope": null,
        "escapedName": "postgraphile-core",
        "name": "postgraphile-core",
        "rawSpec": "4.4.5",
        "spec": "4.4.5",
        "type": "version"
      },
      "F:\\react-node\\postgres-express-react-node-tutorial\\node_modules\\postgraphile"
    ]
  ],
  "_from": "postgraphile-core@4.4.5",
  "_hasShrinkwrap": false,
  "_id": "postgraphile-core@4.4.5",
  "_location": "/postgraphile-core",
  "_nodeVersion": "10.16.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/postgraphile-core_4.4.5_1569252630536_0.2284886194797402"
  },
  "_npmUser": {
    "name": "benjie",
    "email": "npm@benjiegillam.com"
  },
  "_npmVersion": "lerna/3.16.4/node@v10.16.0+x64 (linux)",
  "_phantomChildren": {},
  "_requested": {
    "raw": "postgraphile-core@4.4.5",
    "scope": null,
    "escapedName": "postgraphile-core",
    "name": "postgraphile-core",
    "rawSpec": "4.4.5",
    "spec": "4.4.5",
    "type": "version"
  },
  "_requiredBy": [
    "/postgraphile"
  ],
  "_resolved": "https://registry.npmjs.org/postgraphile-core/-/postgraphile-core-4.4.5.tgz",
  "_shasum": "dad01f5f290b45d104d1a662397a2307e110f00c",
  "_shrinkwrap": null,
  "_spec": "postgraphile-core@4.4.5",
  "_where": "F:\\react-node\\postgres-express-react-node-tutorial\\node_modules\\postgraphile",
  "author": {
    "name": "Benjie Gillam",
    "email": "code@benjiegillam.com"
  },
  "bugs": {
    "url": "https://github.com/graphile/graphile-build/issues"
  },
  "dependencies": {
    "graphile-build": "4.4.5",
    "graphile-build-pg": "4.4.5"
  },
  "description": "<span class=\"badge-patreon\"><a href=\"https://patreon.com/benjie\" title=\"Support Graphile development on Patreon\"><img src=\"https://img.shields.io/badge/sponsor-via%20Patreon-orange.svg\" alt=\"Patreon sponsor button\" /></a></span> [![Discord chat room](https://img.shields.io/discord/489127045289476126.svg)](http://discord.gg/graphile) [![Package on npm](https://img.shields.io/npm/v/postgraphile-core.svg?style=flat)](https://www.npmjs.com/package/postgraphile-core) ![MIT license](https://img.shields.io/npm/l/postgraphile-core.svg) [![Follow](https://img.shields.io/badge/twitter-@GraphileHQ-blue.svg)](https://twitter.com/GraphileHQ)",
  "devDependencies": {
    "@types/node": "^12.0.0",
    "@types/pg": "^7.4.14",
    "debug": "^4.1.1",
    "eslint_d": "^8.0.0",
    "jest": "^24.8.0",
    "jest-silent-reporter": "^0.1.2",
    "jsonwebtoken": "^8.5.1",
    "pg-connection-string": "^2.1.0",
    "prettier": "^1.17.0",
    "ts-node": "^8.1.0",
    "typescript": "^3.4.5"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-dnYBRnXUL/xjgYXEy2s18h1wQFX9ixbabv1K0KXN49MB58a8cy7flcdSBNHi1A8T0xSJJD6KRrAFOG4zeLw2QA==",
    "shasum": "dad01f5f290b45d104d1a662397a2307e110f00c",
    "tarball": "https://registry.npmjs.org/postgraphile-core/-/postgraphile-core-4.4.5.tgz",
    "fileCount": 6,
    "unpackedSize": 34380,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdiOUXCRA9TVsSAnZWagAAoeAQAIV6/kBtOPC+sgkHOvXt\nPYK1B/dke6gKZXi/DsuRQq8GXFI5Xz3wXHcR6EzJQQ0ZOet09ukBY7JnlYKV\nsqYhFew/8kyD0yweGI2H0fEE6Hc3yzfXJJwGYKBvUNK6ppghTO7cKyJ96ZHJ\nfvaXa73NVc3s6Dt1imV3oY8yBM20/FZhFbWNjaYfejK/YbGYh1z/ibsxx6f7\nG/CWcQ58VpvYyCmszkXbOVkxYbvzkRzD31hCmcZ5fM0KuJ4fgTxWhoP/MjZ3\ndM+wh+Sm6uXLBzfHeYzOiZQO5hx5SA2o70PeJCwidhbKpMFSQiOyF61WZiQi\nufQOCV/llpyfFhod1bSvR5Wr/C0dCYrPZqVCQoXcNDy6NlEdpZtyrPpVhC3O\nsi9XuOjvgfix7DIR1db6HZN/3AuJHy2hVo2zNmSvPG4YwFvaCKIapPQHvH+b\nOzgm2wl+tSD9t+A9DeOpPYJ2Z+oQ3UB2EaNviS4gFYTllYQCW+fODfVcgFJS\niedO0aAbvsPPmje5GjTM/bleD2V32svDSOWgX1H/OlQDlPfNb8hzDvPvE5OH\nPAO0u62AVxc+peFtcmPM3CqzEkGmLkPX4Tjr447PqZy86PrI0K8ZGilqGuzw\n/P/k0l93/inMpjEittdJ4N3PkHmLP/w/nkdwfIxMs7WA5K9prnjVZmlN7ZuX\nCW3S\r\n=ul8n\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "engines": {
    "node": ">=8.6"
  },
  "files": [
    "node8plus",
    "index.js"
  ],
  "gitHead": "b0e19c73f1f78c62c4be1a2974a4f2404c538aa5",
  "homepage": "https://github.com/graphile/graphile-build/tree/master/packages/postgraphile-core",
  "jest": {
    "transform": {
      "^.+\\.jsx?$": "../../.jest-wrapper.js"
    },
    "testRegex": "__tests__/.*\\.test\\.js$"
  },
  "license": "MIT",
  "main": "node8plus/index.js",
  "maintainers": [
    {
      "name": "benjie",
      "email": "npm@benjiegillam.com"
    }
  ],
  "name": "postgraphile-core",
  "optionalDependencies": {},
  "peerDependencies": {
    "graphql": ">=0.9 <0.14 || ^14.0.2",
    "pg": ">=6.1.0 <8"
  },
  "readme": "# postgraphile-core\n\n<span class=\"badge-patreon\"><a href=\"https://patreon.com/benjie\" title=\"Support Graphile development on Patreon\"><img src=\"https://img.shields.io/badge/sponsor-via%20Patreon-orange.svg\" alt=\"Patreon sponsor button\" /></a></span>\n[![Discord chat room](https://img.shields.io/discord/489127045289476126.svg)](http://discord.gg/graphile)\n[![Package on npm](https://img.shields.io/npm/v/postgraphile-core.svg?style=flat)](https://www.npmjs.com/package/postgraphile-core)\n![MIT license](https://img.shields.io/npm/l/postgraphile-core.svg)\n[![Follow](https://img.shields.io/badge/twitter-@GraphileHQ-blue.svg)](https://twitter.com/GraphileHQ)\n\nThis module is the compatibility between the web layer of\n[PostGraphile](https://graphile.org/postgraphile/) and the GraphQL schema\nbuilt with Graphile Engine. It loads the relevant `graphile-build-pg` plugins\nand augments the inflector depending on the PostGraphile options provided.\n\n<!-- SPONSORS_BEGIN -->\n\n## Crowd-funded open-source software\n\nTo help us develop this software sustainably under the MIT license, we ask\nall individuals and businesses that use it to help support its ongoing\nmaintenance and development via sponsorship.\n\n### [Click here to find out more about sponsors and sponsorship.](https://www.graphile.org/sponsor/)\n\nAnd please give some love to our featured sponsors ðŸ¤©:\n\n<table><tr>\n<td align=\"center\"><a href=\"http://chads.website/\"><img src=\"https://www.graphile.org/images/sponsors/chadf.png\" width=\"90\" height=\"90\" alt=\"Chad Furman\" /><br />Chad Furman</a></td>\n<td align=\"center\"><a href=\"https://timescale.com/\"><img src=\"https://www.graphile.org/images/sponsors/timescale.svg\" width=\"90\" height=\"90\" alt=\"Timescale\" /><br />Timescale</a></td>\n</tr></table>\n\n<!-- SPONSORS_END -->\n\n## Should you be here?\n\nUnless you want to use the low-level API you probably want to go to the\nPostGraphile (previously 'PostGraphQL') repository instead:\n[https://github.com/graphile/postgraphile](https://github.com/graphile/postgraphile)\n\nIt's suitable to use this module in your own application, but please be aware you\nneed to bring your own security in the form of an authenticated `pgClient` (see\nbelow).\n\nFor more information about PostGraphile and Graphile Engine please see the\ndocumentation at [graphile.org](https://www.graphile.org/).\n\n## `createPostGraphileSchema(pgConfig, schemas, options)`\n\nThis is the function you're most likely to use in production, it will return\na promise to a GraphQL schema. You are responsible in for implementing\nsecurity by passing a pre-authenticated `pgClient` inside the GraphQL\n`context` when you resolve a GraphQL query or mutation.\n\nExample:\n\n```js\nconst schema = await createPostGraphileSchema(\n  process.env.DATABASE_URL,\n  [\"users_schema\", \"posts_schema\"],\n  {\n    dynamicJson: true,\n    pgJwtSecret: process.env.JWT_SECRET,\n    pgJwtTypeIdentifier: \"users_schema.jwt_type\",\n  }\n);\n```\n\nFull example:\n\n```js\nconst { createPostGraphileSchema } = require(\"postgraphile-core\");\nconst { graphql } = require(\"graphql\");\nconst pg = require(\"pg\");\n\n// Create a postgres pool for efficiency\nconst pgPool = new pg.Pool({\n  connectionString: process.env.DATABASE_URL,\n});\n\nasync function runQuery(query, variables) {\n  // Generate our schema using the default plugins against DATABASE_URL,\n  // introspecting the two schemas specified with the options provided.\n  //\n  // Normally for performance you'd only do this once for your entire\n  // application run, not once per query as it is here.\n  const schema = await createPostGraphileSchema(\n    process.env.DATABASE_URL,\n    [\"app_public\"],\n    {\n      dynamicJson: true,\n      pgJwtSecret: process.env.JWT_SECRET,\n      pgJwtTypeIdentifier: \"users_schema.jwt_type\",\n    }\n  );\n\n  // Fetch a postgres client from the pool\n  const pgClient = await pgPool.connect();\n\n  // Start a transaction so we can apply settings local to the transaction\n  await pgClient.query(\"begin\");\n\n  try {\n    // The following statement is equivalent to (but faster than):\n    //    await pgClient.query(\"set local role to 'postgraphile_user'\");\n    //    await pgClient.query(\"set local jwt.claims.user_id to '27'\");\n    await pgClient.query(`select\n      set_config('role', 'postgraphile_user', true),\n      set_config('jwt.claims.user_id', '27', true)\n    `);\n    return await graphql(\n      schema,\n      query,\n      null,\n      /* CONTEXT > */ {\n        pgClient: pgClient,\n      } /* < CONTEXT */,\n      variables\n    );\n  } finally {\n    // commit the transaction (or rollback if there was an error) to clear the local settings\n    await pgClient.query(\"commit\");\n\n    // Release the pgClient back to the pool.\n    await pgClient.release();\n  }\n}\n\n// Normally you'd execute a query in response to an HTTP request or similar\nrunQuery(\n  // This query obviously depends on your database schema\n  \"query MyQuery { allPosts { nodes { id, title, author: userByAuthorId { username } } } }\"\n)\n  .then(result => {\n    console.dir(result);\n    pgPool.end();\n  })\n  .catch(e => {\n    console.error(e);\n    process.exit(1);\n  });\n```\n\nTo see how this works in a real application, check out\n[`withPostGraphileContext` in\nPostGraphile](https://github.com/graphile/postgraphile/blob/master/src/postgraphile/withPostGraphileContext.ts)\n\n## `watchPostGraphileSchema(pgConfig, schemas, options, onNewSchema)`\n\nThis function is useful in development; it returns a promise that resolves to a\n`release` function that you can call to stop watching. The `onNewSchema`\ncallback will be called every time a new schema is generated, and it is\nguaranteed to be called before the returned promise resolves. Other than the\nadditional `onNewSchema` option, the options are identical to that of\n`createPostGraphileSchema` above.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/graphile/graphile-build.git"
  },
  "scripts": {
    "prepack": "mkdir -p node8plus && tsc",
    "test": "scripts/test",
    "watch": "mkdir -p node8plus && tsc --watch"
  },
  "version": "4.4.5"
}
