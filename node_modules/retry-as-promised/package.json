{
  "_args": [
    [
      {
        "raw": "retry-as-promised@^3.1.0",
        "scope": null,
        "escapedName": "retry-as-promised",
        "name": "retry-as-promised",
        "rawSpec": "^3.1.0",
        "spec": ">=3.1.0 <4.0.0",
        "type": "range"
      },
      "F:\\react-node\\postgres-express-react-node-tutorial\\node_modules\\sequelize"
    ]
  ],
  "_from": "retry-as-promised@^3.1.0",
  "_hasShrinkwrap": false,
  "_id": "retry-as-promised@3.2.0",
  "_location": "/retry-as-promised",
  "_nodeVersion": "8.10.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/retry-as-promised_3.2.0_1551944689534_0.18573394846834046"
  },
  "_npmUser": {
    "name": "mickhansen",
    "email": "mick.kasper.hansen@gmail.com"
  },
  "_npmVersion": "5.6.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "retry-as-promised@^3.1.0",
    "scope": null,
    "escapedName": "retry-as-promised",
    "name": "retry-as-promised",
    "rawSpec": "^3.1.0",
    "spec": ">=3.1.0 <4.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/sequelize"
  ],
  "_resolved": "https://registry.npmjs.org/retry-as-promised/-/retry-as-promised-3.2.0.tgz",
  "_shasum": "769f63d536bec4783549db0777cb56dadd9d8543",
  "_shrinkwrap": null,
  "_spec": "retry-as-promised@^3.1.0",
  "_where": "F:\\react-node\\postgres-express-react-node-tutorial\\node_modules\\sequelize",
  "author": {
    "name": "Mick Hansen",
    "email": "maker@mhansen.io"
  },
  "bugs": {
    "url": "https://github.com/mickhansen/retry-as-promised/issues"
  },
  "dependencies": {
    "any-promise": "^1.3.0"
  },
  "description": "Retry a failed promise",
  "devDependencies": {
    "bluebird": "^3.5.1",
    "chai": "^4.2.0",
    "chai-as-promised": "^7.1.1",
    "cross-env": "^5.2.0",
    "mocha": "^5.2.0",
    "moment": "^2.10.6",
    "q": "^1.5.1",
    "sinon": "^7.0.0",
    "sinon-chai": "^3.2.0"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-CybGs60B7oYU/qSQ6kuaFmRd9sTZ6oXSc0toqePvV74Ac6/IFZSI1ReFQmtCN+uvW1Mtqdwpvt/LGOiCBAY2Mg==",
    "shasum": "769f63d536bec4783549db0777cb56dadd9d8543",
    "tarball": "https://registry.npmjs.org/retry-as-promised/-/retry-as-promised-3.2.0.tgz",
    "fileCount": 4,
    "unpackedSize": 7240,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcgMvyCRA9TVsSAnZWagAAF8MQAIkScTIuV2OiWqQ+Zzn0\n3XiRr7dN0qgSOjwo9d+2rnvq4DoCQyewCLf7M7DamKVmNmuPd2pt2KxfvRvr\nhx1phoxno/8D2ftW2PmacZLPJkysf9tQHwE5H5tAhPmEHsdA2yGU8rXCN87e\n+u3xu2T+1YrvsDDc1LX/hZrI6fJrwhu2UfqJizG8parizDVa2mjxQ3xrTnAr\nUYjEx34l9CUpoRr1nkhu9g+n9lkn0S+mAeDZ6FAvK7bbw05RWGICn9yWhjEC\nvrqbVxDD/aeYC+6MRMB2b3/kP7HuRKnoLwrZL6iL7xx5GpcWFEp5H4pH59zU\noX6GuldJiaGGMYJfioQ2qj6Qx5kYujvkG5mURnIu6V/OJYnA2i3r8UQRT0lx\nMiifkLpLehPBrwCCZ/GVbN4EZgYmNGRGCO6ORHrvOOShCogg2XwjDmm+rAns\nrGZW0/hPI3JvzNrc1U/1PZ+cJ3GGSNH0X1UX4/gvsYuTSMJ6feLG0j8CrHTa\nFwbIynFVAsZoCwXFoX1WYm7YxG1zS+ic5yqO1x99iDGR6L2ClQyph2rJH+z8\n0cxj4xmru8XZRLvVBCht9kkJkpt04UTnyyPhlBtF1RvrrHST+SBONTL/a37E\n0G8Z0SJSGV3htnML8lro+YwHOfnwDRSov+83q6kaXoU1BZT4ZDMpxMykbT6G\n9IC+\r\n=s1gg\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "files": [],
  "gitHead": "330b553e45cc7466a25ee4a2642ef135d8078e2a",
  "homepage": "https://github.com/mickhansen/retry-as-promised",
  "keywords": [
    "retry",
    "promise",
    "bluebird"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "mickhansen",
      "email": "mick.kasper.hansen@gmail.com"
    }
  ],
  "name": "retry-as-promised",
  "optionalDependencies": {},
  "readme": "# retry-as-promised\n\nRetry promises when they fail, based upon [any-promise](https://github.com/kevinbeaty/any-promise).\n\n## Installation\n\n```sh\n$ npm install --save retry-as-promised\n$ yarn add retry-as-promised\n```\n\n## Configuration\n\n```js\nvar retry = require('retry-as-promised');\n\nvar warningFn = function(msg){ someLoggingFunction(msg, 'notice'); };\n\n// Will call the until max retries or the promise is resolved.\nreturn retry(function (options) {\n  // options.current, times callback has been called including this call\n  return promise;\n}, {\n  max: 3, // maximum amount of tries\n  timeout: 10000 // throw if no response or error within millisecond timeout, default: undefined,\n  match: [ // Must match error signature (ala bluebird catch) to continue\n    Sequelize.ConnectionError,\n    'SQLITE_BUSY'\n  ],\n  backoffBase: 1000 // Initial backoff duration in ms. Default: 100,\n  backoffExponent: 1.5 // Exponent to increase backoff each try. Default: 1.1\n  report: warningFn, // the function used for reporting; must have a (string, object) argument signature, where string is the message that will passed in by retry-as-promised, and the object will be this configuration object + the $current property\n  name:  'SourceX' // if user supplies string, it will be used when composing error/reporting messages; else if retry gets a callback, uses callback name in erroring/reporting; else (default) uses literal string 'unknown'\n});\n```\n\n## Tested with\n\n- Bluebird\n- Q\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/mickhansen/retry-as-promised.git"
  },
  "scripts": {
    "test": "PROMISE_TYPE=bluebird npm run test-raw && PROMISE_TYPE=q npm run test-raw",
    "test-raw": "cross-env DEBUG=retry-as-promised* ./node_modules/.bin/mocha --check-leaks --colors -t 10000 --reporter spec test/promise.test.js"
  },
  "version": "3.2.0"
}
