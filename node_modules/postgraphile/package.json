{
  "_args": [
    [
      {
        "raw": "postgraphile",
        "scope": null,
        "escapedName": "postgraphile",
        "name": "postgraphile",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "F:\\react-node\\postgres-express-react-node-tutorial"
    ]
  ],
  "_from": "postgraphile",
  "_hasShrinkwrap": false,
  "_id": "postgraphile@4.4.4",
  "_location": "/postgraphile",
  "_nodeVersion": "10.16.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/postgraphile_4.4.4_1569317784682_0.25911968991413037"
  },
  "_npmUser": {
    "name": "benjie",
    "email": "npm@benjiegillam.com"
  },
  "_npmVersion": "6.9.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "postgraphile",
    "scope": null,
    "escapedName": "postgraphile",
    "name": "postgraphile",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/postgraphile/-/postgraphile-4.4.4.tgz",
  "_shasum": "2f8df890251d35cc469161538ec3d82dd504d4a1",
  "_shrinkwrap": null,
  "_spec": "postgraphile",
  "_where": "F:\\react-node\\postgres-express-react-node-tutorial",
  "author": {
    "name": "Benjie Gillam",
    "email": "benjie@graphile.org",
    "url": "https://twitter.com/benjie"
  },
  "bin": {
    "postgraphile": "cli.js"
  },
  "bugs": {
    "url": "https://github.com/graphile/postgraphile/issues"
  },
  "dependencies": {
    "@graphile/lru": "^4.4.1-alpha.2",
    "@types/jsonwebtoken": "^8.3.2",
    "@types/koa": "^2.0.44",
    "@types/pg": "^7.4.10",
    "@types/ws": "^6.0.1",
    "body-parser": "^1.15.2",
    "chalk": "^2.4.2",
    "commander": "^2.19.0",
    "debug": "^4.1.1",
    "finalhandler": "^1.0.6",
    "graphql": "^0.6.0 || ^0.7.0 || ^0.8.0-b || ^0.9.0 || ^0.10.0 || ^0.11.0 || ^0.12.0 || ^0.13.0 || ^14.0.2",
    "http-errors": "^1.5.1",
    "iterall": "^1.0.2",
    "jsonwebtoken": "^8.0.0",
    "parseurl": "^1.3.2",
    "pg": ">=6.1.0 <8",
    "pg-connection-string": "^2.0.0",
    "pg-sql2": "^4.4.1-alpha.2",
    "postgraphile-core": "4.4.5",
    "subscriptions-transport-ws": "^0.9.15",
    "tslib": "^1.5.0",
    "ws": "^6.1.3"
  },
  "description": "A GraphQL schema created by reflection over a PostgreSQL schema üêò (previously known as PostGraphQL)",
  "devDependencies": {
    "@babel/core": "7.4.3",
    "@babel/plugin-proposal-class-properties": "7.4.0",
    "@babel/plugin-transform-runtime": "7.4.3",
    "@babel/preset-env": "7.4.3",
    "@babel/preset-react": "7.0.0",
    "@babel/runtime": "7.4.3",
    "@types/chalk": "^2.2.0",
    "@types/commander": "^2.12.2",
    "@types/debug": "^4.1.4",
    "@types/finalhandler": "^1.1.0",
    "@types/http-errors": "^1.6.1",
    "@types/jest": "^24.0.11",
    "@types/lru-cache": ">=4 <5",
    "@types/node": "^10.9.4",
    "@types/parseurl": "^1.3.1",
    "babel-loader": "8.0.5",
    "connect": "^3.5.0",
    "css-loader": "2.1.1",
    "express": "^4.14.0",
    "fastify": "^2.2.0",
    "html-webpack-inline-source-plugin": "^0.0.10",
    "html-webpack-plugin": "^3.2.0",
    "jest": "^24.7.1",
    "koa": "^2.5.1",
    "koa-compress": "^3.0.0",
    "koa-mount": "^4.0.0",
    "nodemon": "^1.11.0",
    "pg-minify": "~1.0.0",
    "prettier": "^1.15.2",
    "source-map-support": "^0.5.12",
    "style-loader": "^0.23.0",
    "superagent": "^4.1.0",
    "ts-node": "^8.1.0",
    "tslint": "^5.10.0",
    "tslint-config-prettier": "^1.14.0",
    "typescript": "^3.4.3",
    "webpack": "^4.17.2"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-kT6Ygjet3RmzNBL+Ci87txRRisdu+HDY/peGpk+rsj8MTmRrkqR4oAifI9tyf0wwqGxmXymk9YP2L8KE8E+XOA==",
    "shasum": "2f8df890251d35cc469161538ec3d82dd504d4a1",
    "tarball": "https://registry.npmjs.org/postgraphile/-/postgraphile-4.4.4.tgz",
    "fileCount": 83,
    "unpackedSize": 4406219,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdieOZCRA9TVsSAnZWagAAWBgQAJiwYDL1P5o7DZpcA9RT\nWvfPysowYfDqCvYqT3Lb/TCjK5N47ow18MzSXI4RMUO9mN6nIPkOReN5Ys4J\nu686A73w8hYi2i1kwXgFVoVW4/MEaZIUbb4/vxPvKl2TMn5bZBhoGv7KIQxY\ni4jBj+4mcMT1zvC0ridiVAvcJHixVLKqtnO1Fzek4GYDzoXyUwe19BucrxiN\nsg5NIC9NLpecpLaCP1AeuqWHMZCJ6NF41tK+9sq8+8H/lgJxHEQcEJy3YzVp\nE6Y5g+mJF3WqQ0D7wbmqEXWLkIlx2QxOxQut7ZYKmixapjHwjquQMeAe++8O\nE8Al15mB4Z6dybtS62LIhAX8dEkmZ0m5wybabgNi6iPNcrXuQpLXOqSJMcAY\n3TCSPmTM1+XOKDDTtYa+0d95n4iKW/1VBMQ2ncqh990Hb+FykbBjry8v0dzL\npQwtHV45cE3UUqKjsY47cbInnAIM34QqDJeoe+E+uMTZ4h8ey9iXMC6wCyvp\nbXBWZCgh6Bkaiumrt2uZ134IWr2HEDAgDjo2e3KOeISezH/jtogfcNvorVWr\ntcYoWwuca8QV1R4+Ne1bD/RS9Nc15Ts2qj3mtQy48FhII0G43NQkXamZVu83\nQMuE3kWos5u3TKl99KqNfhAE5pPFcGKOP5jkzDTBZO4RJ5z6yzimquY0v9dv\nk49Y\r\n=BLka\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "engines": {
    "node": ">=8.6"
  },
  "files": [
    "sponsors.json",
    "build",
    "build-turbo",
    "index.js",
    "cli.js"
  ],
  "gitHead": "5e8b29536590b34aac58c5d8a6e3d38a91b42b8b",
  "homepage": "https://www.graphile.org/postgraphile/",
  "jest": {
    "transform": {
      ".*": "<rootDir>/resources/jest-preprocessor.js"
    },
    "moduleFileExtensions": [
      "ts",
      "js",
      "json"
    ],
    "setupFiles": [
      "<rootDir>/resources/jest-setup.js"
    ],
    "browser": false,
    "testEnvironment": "node",
    "roots": [
      "<rootDir>/src"
    ],
    "testRegex": "/__tests__/[^.]+-test.(t|j)s$"
  },
  "keywords": [
    "graphql",
    "engine",
    "pg",
    "postgres",
    "postgresql",
    "postgraphql",
    "schema",
    "reflection",
    "introspection",
    "server",
    "relay",
    "connection",
    "graphile",
    "graphile engine",
    "graphql engine",
    "graphile-build"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "benjie",
      "email": "npm@benjiegillam.com"
    }
  ],
  "name": "postgraphile",
  "optionalDependencies": {},
  "readme": "<img width=\"120\" height=\"120\" title=\"PostGraphile logo\" src=\"https://cdn.rawgit.com/graphile/graphile.github.io/a6225f8c3052df5c276ecef28aeb0cade1aec16a/logos/postgraphile.optimized.svg\" />\n\n# PostGraphile\n\n[![Patreon sponsor button](https://img.shields.io/badge/sponsor-via%20Patreon-orange.svg)](https://patreon.com/benjie)\n[![Discord chat room](https://img.shields.io/discord/489127045289476126.svg)](http://discord.gg/graphile)\n[![Package on npm](https://img.shields.io/npm/v/postgraphile.svg?style=flat)](https://www.npmjs.com/package/postgraphile)\n![MIT license](https://img.shields.io/npm/l/postgraphile.svg)\n[![Follow](https://img.shields.io/badge/twitter-@GraphileHQ-blue.svg)](https://twitter.com/GraphileHQ)\n\n_**Instant lightning-fast GraphQL API backed primarily by your PostgreSQL database. Highly customisable and extensible thanks to incredibly powerful plugin system.**_ _Formerly \"PostGraphQL\"._\n\n## Documentation: [graphile.org/postgraphile](https://graphile.org/postgraphile)\n\n<!-- SPONSORS_BEGIN -->\n\n## Crowd-funded open-source software\n\nTo help us develop this software sustainably under the MIT license, we ask\nall individuals and businesses that use it to help support its ongoing\nmaintenance and development via sponsorship.\n\n### [Click here to find out more about sponsors and sponsorship.](https://www.graphile.org/sponsor/)\n\nAnd please give some love to our featured sponsors ü§©:\n\n<table><tr>\n<td align=\"center\"><a href=\"http://chads.website/\"><img src=\"https://www.graphile.org/images/sponsors/chadf.png\" width=\"90\" height=\"90\" alt=\"Chad Furman\" /><br />Chad Furman</a></td>\n<td align=\"center\"><a href=\"https://timescale.com/\"><img src=\"https://www.graphile.org/images/sponsors/timescale.svg\" width=\"90\" height=\"90\" alt=\"Timescale\" /><br />Timescale</a></td>\n</tr></table>\n\n<!-- SPONSORS_END -->\n\n## About\n\n**GraphQL** is a new way of communicating with your server. It eliminates the problems of over- and under-fetching, incorporates strong data types, has built-in introspection, documentation and deprecation capabilities, and is implemented in many programming languages. This all leads to gloriously low-latency user experiences, better developer experiences, and much increased productivity. Because of all this, GraphQL is typically used as a replacement for (or companion to) RESTful API services.\n\n**PostgreSQL** is the self-proclaimed ‚Äúworld‚Äôs most advanced open source database,‚Äù with each new release bring more amazing features and performance gains. Thinking of your database as a plain CRUD store is now an archaic viewpoint as modern PostgreSQL can do so much for you &mdash; from authorization with Row-Level Security (RLS, introduced in PG9.5), through Foreign Data Wrappers (FDW), to real time notifications with `LISTEN`/`NOTIFY`.\n\n**PostGraphile** pairs these two incredible technologies together, helping you not only build applications more rapidly, but to build lightning-fast applications. PostGraphile allows you to access the power of PostgreSQL through a well designed, extensible, customisable and incredibly performant GraphQL server. It automatically detects tables, columns, indexes, relationships, views, types, functions, comments, and more - providing a GraphQL server that is highly intelligent about your data, and that automatically updates itself without restarting when you change your database schema.\n\nWith PostGraphile, a well designed database schema should serve the basis for a well thought out API. PostgreSQL already has amazing authorization and relationship infrastructure, _why duplicate that logic_ in a custom API? A PostGraphile API is likely to provide a more performant and standards compliant GraphQL API than any created in-house, and can be built in a fraction of the time. Focus on your product and let PostGraphile worry about the API layer. Once you need to expand beyond this, we have a powerful plugin system including many [community contributed plugins](https://www.graphile.org/postgraphile/community-plugins/). For a critical evaluation of PostGraphile to determine if it fits in your tech stack, read [evaluating PostGraphile for your project](https://www.graphile.org/postgraphile/evaluating/).\n\n## Introduction\n\nWatch a talk by the original author [Caleb](https://twitter.com/calebmer) at GraphQL Summit for a walk-through of building an application with PostGraphile in under 7 minutes. This was using v2 (then called PostGraphQL); we're now up to v4 which has many more bells and whistles!\n\n[![PostGraphile at GraphQL Summit](https://img.youtube.com/vi/b3pwlCDy6vY/0.jpg)](https://www.youtube.com/watch?v=b3pwlCDy6vY)\n\nHear from the current maintainer [Benjie](https://twitter.com/benjie) at GraphQL Finland about the benefits of Database-Driven GraphQL Development:\n\n[![Database Driven GraphQL Development at GraphQL Finland](https://img.youtube.com/vi/XDOrhTXd4pE/0.jpg)](https://www.youtube.com/watch?v=XDOrhTXd4pE)\n\n## Usage\n\n**Documentation: [graphile.org/postgraphile](https://graphile.org/postgraphile)**\n\nYou can use PostGraphile via the CLI, as a Node.js middleware, or use the GraphQL schema directly. Make sure to check out the **[full usage instructions](https://graphile.org/postgraphile/usage/)** on the documentation website. We also have a [PostgreSQL schema design guide](https://www.graphile.org/postgraphile/postgresql-schema-design/) you can follow to build a fully functional PostGraphile API.\n\n### CLI\n\nTo get started you can install PostGraphile globally:\n\n```bash\nnpm install -g postgraphile\n```\n\n‚Ä¶and then just run it! By default, PostGraphile will connect to your local database at `postgres://localhost:5432` and introspect the `public` schema. See [the available CLI flags](https://www.graphile.org/postgraphile/usage-cli/) with:\n\n```bash\npostgraphile --help\n```\n\nWhen you're ready to use PostGraphile for your own project, you're advised to install it locally with `yarn`, and run it with `npx`:\n\n```bash\nyarn add postgraphile\nnpx postgraphile --help\n```\n\n### Middleware\n\nYou can also use PostGraphile as [native HTTP, Connect, Express, or Koa (experimental) middleware](https://www.graphile.org/postgraphile/usage-library/), e.g.:\n\n```bash\nyarn add postgraphile\n```\n\n```js\nimport { createServer } from 'http';\nimport postgraphile from 'postgraphile';\n\ncreateServer(postgraphile());\n```\n\nCheck out [hapi-postgraphile](https://github.com/mshick/hapi-postgraphile) if you're interested in using PostGraphile as a [hapi](https://github.com/hapijs/hapi) server plugin.\n\n### Docker\n\nTo run via Docker, simply pass the [CLI options](https://www.graphile.org/postgraphile/usage-cli/) to the Docker container:\n\n```bash\ndocker pull graphile/postgraphile\ndocker run --init graphile/postgraphile --help\n```\n\nE.g. you might run this command (substituting the relevant variables):\n\n```bash\ndocker run --init -p 5000:5000 graphile/postgraphile --connection postgres://POSTGRES_USER:POSTGRES_PASSWORD@POSTGRES_HOST:POSTGRES_PORT/POSTGRES_DATABASE --schema app_public --watch\n```\n\n## Read More\n\n**Full documentation for PostGraphile is located at [graphile.org/postgraphile](https://graphile.org/postgraphile).**\n\nPostGraphile features include:\n\n- Authorization (security) provided by PostgreSQL:\n  - [role-based access control (RBAC)](https://www.postgresql.org/docs/10/static/sql-grant.html)\n  - [row-level security (RLS)][row-level-security]\n- [Automatic GraphQL relations from SQL relations](https://www.graphile.org/postgraphile/relations/)\n- [PostgreSQL procedure support][procedure documentation]:\n  - [Custom queries][advanced queries documentation]\n  - [Custom mutations](https://www.graphile.org/postgraphile/custom-mutations/)\n  - [Computed columns](https://www.graphile.org/postgraphile/computed-columns/)\n- Development UI (GraphiQL) built in\n- `--watch` mode, auto-detects changes in SQL schema, hot-reloads changes into GraphiQL\n- [Automatic documentation, enhanced by PostgreSQL `COMMENT`s](http://www.postgresql.org/docs/current/static/sql-comment.html)\n- [Schema customisation through smart comments](https://www.graphile.org/postgraphile/smart-comments/)\n- [Simple JWT authentication straight from the database](https://www.graphile.org/postgraphile/security/)\n- [Cursor-based pagination, Relay (classic & modern) compatible](https://www.graphile.org/postgraphile/connections/)\n- Global object identifiers (`nodeId` by default, but Relay-favoured `id` with `--classic-ids`)\n- Relay-compatible mutations\n- [Use direct from the CLI](https://www.graphile.org/postgraphile/usage-cli/)\n- [Use as Express, Connect, or Koa middleware](https://www.graphile.org/postgraphile/usage-library/)\n- [Just use the generated GraphQL schema](https://www.graphile.org/postgraphile/usage-schema/)\n\n[procedure documentation]: https://www.graphile.org/postgraphile/procedures/\n[advanced queries documentation]: https://www.graphile.org/postgraphile/custom-queries/\n[row-level-security]: http://www.postgresql.org/docs/current/static/ddl-rowsecurity.html\n\n## Requirements\n\n[Full requirements are on the website](https://www.graphile.org/postgraphile/requirements/), but a basic summary is:\n\n- Node v8.6+\n- PostgreSQL 9.6+ (officially; but currently works with 9.4+)\n- Linux, macOS or Windows\n\nCaveats:\n\n- PostGraphile does not have automated tests on Windows, if you notice any\n  issues please file them (or send a PR!)\n\n## Supporting PostGraphile\n\nThe fastest and easiest way you can help PostGraphile thrive is by [sponsoring\nongoing development and maintenance](https://graphile.org/sponsor/).\n\nWant to help testing and developing PostGraphile? Check out the [contributing\ndocument](CONTRIBUTING.md) to get started quickly!\n\nCommercial support, consultancy and development services are available direct\nfrom the maintainer; see [Professional Services](https://www.graphile.org/support/)\nfor more information, or get in touch!\n\nThe maintainer of this project is [@Benjie](https://twitter.com/benjie) -\nfollow him on Twitter!\n\n## Thanks\n\nHuge thanks to [the individuals and companies who sponsor PostGraphile's\ndevelopment](SPONSORS.md) - their financial contributions enable more time to\nbe spent on the project: from bug fixes, to code review, to new features! If\nyou want to help the project advance more rapidly, please join them in\n[supporting this project](https://graphile.org/sponsor/) üôè\n\nA humongous, heart-felt, thank you to the original author of PostGraphile -\n[Caleb Meredith](https://twitter.com/calebmer) - for everything he put into\nPostGraphile! He's now graduated from the project and we all wish him the best\nfor his future ventures!\n\nThanks also to the people working on\n[PostgREST](https://github.com/begriffs/postgrest) which was a huge inspiration\nfor this project!\n\nThanks and enjoy üëç\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/graphile/postgraphile.git"
  },
  "scripts": {
    "build": "./scripts/build",
    "dev": "./scripts/dev",
    "lint": "./scripts/lint",
    "make-assets": "./scripts/make-assets",
    "prepack": "./scripts/build",
    "prettier": "prettier 'src/**/*.[tj]s' 'postgraphiql/src/**/*.[tj]s'",
    "prettier:check": "yarn prettier --list-different",
    "prettier:fix": "yarn prettier --write",
    "test": "./scripts/test"
  },
  "types": "build/index.d.ts",
  "version": "4.4.4"
}
