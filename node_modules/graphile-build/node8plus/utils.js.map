{"version":3,"sources":["../src/utils.js"],"names":["bindAll","obj","keys","forEach","key","bind","constantCaseAll","str","replace","toUpperCase","formatInsideUnderscores","fn","matches","match","Error","start","middle","end","upperFirst","upperFirstAll","camelCase","camelCaseAll","constantCase","upperCamelCase","pluralize","singularize","plz","singular"],"mappings":";;;;;;;AACA;;AACA;;AACA;;;;AAEA,MAAMA,OAAO,GAAG,CAACC,GAAD,EAAUC,IAAV,KAAkC;AAChDA,EAAAA,IAAI,CAACC,OAAL,CAAaC,GAAG,IAAI;AAClBH,IAAAA,GAAG,CAACG,GAAD,CAAH,GAAWH,GAAG,CAACG,GAAD,CAAH,CAASC,IAAT,CAAcJ,GAAd,CAAX;AACD,GAFD;AAGA,SAAOA,GAAP;AACD,CALD;;;;AASO,MAAMK,eAAe,GAAIC,GAAD,IAC7BA,GAAG,CACAC,OADH,CACW,iBADX,EAC8B,GAD9B,EAEGA,OAFH,CAEW,SAFX,EAEsB,KAFtB,EAGGA,OAHH,CAGW,MAHX,EAGmB,GAHnB,EAIGA,OAJH,CAIW,gBAJX,EAI6B,EAJ7B,EAKGA,OALH,CAKW,QALX,EAKqB,KALrB,EAK4B;AAL5B,CAMGC,WANH,EADK;;;;AASA,MAAMC,uBAAuB,GAAIC,EAAD,IACrCJ,GADwE,IAErE;AACH,QAAMK,OAAO,GAAGL,GAAG,CAACM,KAAJ,CAAU,sBAAV,CAAhB;;AACA,MAAI,CAACD,OAAL,EAAc;AACZ,UAAM,IAAIE,KAAJ,CAAU,aAAV,CAAN,CADY,CACoB;AACjC;;AACD,QAAM,GAAGC,KAAH,EAAUC,MAAV,EAAkBC,GAAlB,IAAyBL,OAA/B;AACA,SAAQ,GAAEG,KAAM,GAAEJ,EAAE,CAACK,MAAD,CAAS,GAAEC,GAAI,EAAnC;AACD,CATM;;;AAWA,MAAMC,UAAU,GAAGR,uBAAuB,CAACS,mBAAD,CAA1C;;AACA,MAAMC,SAAS,GAAGV,uBAAuB,CAACW,kBAAD,CAAzC;;AACA,MAAMC,YAAY,GAAGZ,uBAAuB,CAACJ,eAAD,CAA5C;;;AACA,MAAMiB,cAAc,GAAIhB,GAAD,IAC5BW,UAAU,CAACE,SAAS,CAACb,GAAD,CAAV,CADL;;;;AAGA,MAAMiB,SAAS,GAAIjB,GAAD,IAAiB,wBAAIA,GAAJ,CAAnC;;;;AACA,MAAMkB,WAAW,GAAIlB,GAAD,IAAiBmB,mBAAIC,QAAJ,CAAapB,GAAb,CAArC","sourcesContent":["// @flow\nimport upperFirstAll from \"lodash/upperFirst\";\nimport camelCaseAll from \"lodash/camelCase\";\nimport plz from \"pluralize\";\n\nconst bindAll = (obj: {}, keys: Array<string>) => {\n  keys.forEach(key => {\n    obj[key] = obj[key].bind(obj);\n  });\n  return obj;\n};\n\nexport { bindAll };\n\nexport const constantCaseAll = (str: string) =>\n  str\n    .replace(/[^a-zA-Z0-9_]+/g, \"_\")\n    .replace(/[A-Z]+/g, \"_$&\")\n    .replace(/__+/g, \"_\")\n    .replace(/^[^a-zA-Z0-9]+/, \"\")\n    .replace(/^[0-9]/, \"_$&\") // GraphQL enums must not start with a number\n    .toUpperCase();\n\nexport const formatInsideUnderscores = (fn: (input: string) => string) => (\n  str: string\n) => {\n  const matches = str.match(/^(_*)([\\s\\S]*?)(_*)$/);\n  if (!matches) {\n    throw new Error(\"Impossible?\"); // Satiate Flow\n  }\n  const [, start, middle, end] = matches;\n  return `${start}${fn(middle)}${end}`;\n};\n\nexport const upperFirst = formatInsideUnderscores(upperFirstAll);\nexport const camelCase = formatInsideUnderscores(camelCaseAll);\nexport const constantCase = formatInsideUnderscores(constantCaseAll);\nexport const upperCamelCase = (str: string): string =>\n  upperFirst(camelCase(str));\n\nexport const pluralize = (str: string) => plz(str);\nexport const singularize = (str: string) => plz.singular(str);\n"],"file":"utils.js"}