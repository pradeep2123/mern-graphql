"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.singularize = exports.pluralize = exports.upperCamelCase = exports.constantCase = exports.camelCase = exports.upperFirst = exports.formatInsideUnderscores = exports.constantCaseAll = exports.bindAll = void 0;

var _upperFirst = _interopRequireDefault(require("lodash/upperFirst"));

var _camelCase = _interopRequireDefault(require("lodash/camelCase"));

var _pluralize = _interopRequireDefault(require("pluralize"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const bindAll = (obj, keys) => {
  keys.forEach(key => {
    obj[key] = obj[key].bind(obj);
  });
  return obj;
};

exports.bindAll = bindAll;

const constantCaseAll = str => str.replace(/[^a-zA-Z0-9_]+/g, "_").replace(/[A-Z]+/g, "_$&").replace(/__+/g, "_").replace(/^[^a-zA-Z0-9]+/, "").replace(/^[0-9]/, "_$&") // GraphQL enums must not start with a number
.toUpperCase();

exports.constantCaseAll = constantCaseAll;

const formatInsideUnderscores = fn => str => {
  const matches = str.match(/^(_*)([\s\S]*?)(_*)$/);

  if (!matches) {
    throw new Error("Impossible?"); // Satiate Flow
  }

  const [, start, middle, end] = matches;
  return `${start}${fn(middle)}${end}`;
};

exports.formatInsideUnderscores = formatInsideUnderscores;
const upperFirst = formatInsideUnderscores(_upperFirst.default);
exports.upperFirst = upperFirst;
const camelCase = formatInsideUnderscores(_camelCase.default);
exports.camelCase = camelCase;
const constantCase = formatInsideUnderscores(constantCaseAll);
exports.constantCase = constantCase;

const upperCamelCase = str => upperFirst(camelCase(str));

exports.upperCamelCase = upperCamelCase;

const pluralize = str => (0, _pluralize.default)(str);

exports.pluralize = pluralize;

const singularize = str => _pluralize.default.singular(str);

exports.singularize = singularize;
//# sourceMappingURL=utils.js.map