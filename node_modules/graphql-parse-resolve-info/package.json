{
  "_args": [
    [
      {
        "raw": "graphql-parse-resolve-info@4.4.5",
        "scope": null,
        "escapedName": "graphql-parse-resolve-info",
        "name": "graphql-parse-resolve-info",
        "rawSpec": "4.4.5",
        "spec": "4.4.5",
        "type": "version"
      },
      "F:\\react-node\\postgres-express-react-node-tutorial\\node_modules\\graphile-build"
    ]
  ],
  "_from": "graphql-parse-resolve-info@4.4.5",
  "_hasShrinkwrap": false,
  "_id": "graphql-parse-resolve-info@4.4.5",
  "_location": "/graphql-parse-resolve-info",
  "_nodeVersion": "10.16.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/graphql-parse-resolve-info_4.4.5_1569252609864_0.5560462571637994"
  },
  "_npmUser": {
    "name": "benjie",
    "email": "npm@benjiegillam.com"
  },
  "_npmVersion": "lerna/3.16.4/node@v10.16.0+x64 (linux)",
  "_phantomChildren": {},
  "_requested": {
    "raw": "graphql-parse-resolve-info@4.4.5",
    "scope": null,
    "escapedName": "graphql-parse-resolve-info",
    "name": "graphql-parse-resolve-info",
    "rawSpec": "4.4.5",
    "spec": "4.4.5",
    "type": "version"
  },
  "_requiredBy": [
    "/graphile-build"
  ],
  "_resolved": "https://registry.npmjs.org/graphql-parse-resolve-info/-/graphql-parse-resolve-info-4.4.5.tgz",
  "_shasum": "7f564ef80e22527c0ffdc7b0f98bb09258d8562a",
  "_shrinkwrap": null,
  "_spec": "graphql-parse-resolve-info@4.4.5",
  "_where": "F:\\react-node\\postgres-express-react-node-tutorial\\node_modules\\graphile-build",
  "author": {
    "name": "Benjie Gillam",
    "email": "code@benjiegillam.com"
  },
  "bugs": {
    "url": "https://github.com/graphile/graphile-build/issues"
  },
  "dependencies": {
    "debug": "^4.1.1"
  },
  "description": "Parse GraphQLResolveInfo (the 4th argument of resolve) into a simple tree",
  "devDependencies": {
    "@types/debug": "^4.1.4",
    "@types/jest": "^24.0.12",
    "@types/node": "^12.0.0",
    "eslint_d": "^8.0.0",
    "jest": "^24.8.0",
    "ts-jest": "^24.0.2",
    "ts-node": "^8.1.0",
    "typescript": "^3.4.5"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-KEjcDEK4zt+n8/MQL+d1kVQFTDUrn/PTlmQnO4rQ6l2kMXs3ZEMnMabxq5wnnwSAtGUaE8UnfFfcfGGIO5WfZQ==",
    "shasum": "7f564ef80e22527c0ffdc7b0f98bb09258d8562a",
    "tarball": "https://registry.npmjs.org/graphql-parse-resolve-info/-/graphql-parse-resolve-info-4.4.5.tgz",
    "fileCount": 10,
    "unpackedSize": 56562,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdiOUCCRA9TVsSAnZWagAAPLkP/jRg81ISV8ZXpikswJL+\nvYdj9XploBwkYRSB71Yu8kssSIkZdvTvOPJwfH8H72+r/bu1SX4anyoEwrZ+\n/lfgMhw504NNUnliGd3Lu5omAuxkd30PjdA5ZczUkmqQdrek0/QFFU349UFN\n5A8BfiGn3EJjhiq7hcJXdoexs9mH0s0DXY+bwKotGxqXScIiH0ayARHVWJHT\nvr2YGOWyM9AyvzH3Zu8ysuF+z5qCxJa4M7lLX4iKnoF51eYk1Rj1UyLoa1K7\nDhKTols4HTXWBjH17Vq3SDuOv38vNo8LWAilaogk6DMWW7kMZSTt2HU6jJgP\nEv3dW1tM13Axeu71wTIyxPk02ItBbDJgAY5GnT6mvBtrvZ/KvzN7GSrmkuNT\nZSR3/wTlaWkMDRAtZo/q5cf/WblyPR/2z5f5Op7/f3J0JdTJyCr7lT+Tzrep\n8aeUthZ4hA6G0mWiuzGIXFsoTVvGHDuNnVaErWJ4HuowYEMnhSrYAoMygZw0\n3UgXo71jT05s2LMpOYQdzFu0LbI3eDXpu1KcFlWU43JWcmb4olNCAT5uHdNk\n2UmGhrEaMK3UrcIeoUCTjYJu2zHF6OdzDdY1IhFko+BpKSOiFS4aawLvJx9j\n0y9LSM7v7fFNANQ0sSVm20GSkIqducgH/qKr75NOWhy2QY6V3WmaR4If6ehH\nWofd\r\n=ZH12\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "engines": {
    "node": ">=8.6"
  },
  "files": [
    "node8plus",
    "index.js",
    "build-turbo"
  ],
  "gitHead": "b0e19c73f1f78c62c4be1a2974a4f2404c538aa5",
  "homepage": "https://github.com/graphile/graphile-build/tree/master/packages/graphql-parse-resolve-info",
  "keywords": [
    "graphile",
    "graphql",
    "engine",
    "resolveinfo",
    "graphqljs",
    "graphql-js",
    "graphqlresolveinfo"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "benjie",
      "email": "npm@benjiegillam.com"
    }
  ],
  "name": "graphql-parse-resolve-info",
  "optionalDependencies": {},
  "peerDependencies": {
    "graphql": ">=0.9 <0.14 || ^14.0.2"
  },
  "readme": "# graphql-parse-resolve-info\n\n<span class=\"badge-patreon\"><a href=\"https://patreon.com/benjie\" title=\"Support Graphile development on Patreon\"><img src=\"https://img.shields.io/badge/sponsor-via%20Patreon-orange.svg\" alt=\"Patreon sponsor button\" /></a></span>\n[![Discord chat room](https://img.shields.io/discord/489127045289476126.svg)](http://discord.gg/graphile)\n[![Package on npm](https://img.shields.io/npm/v/graphql-parse-resolve-info.svg?style=flat)](https://www.npmjs.com/package/graphql-parse-resolve-info)\n![MIT license](https://img.shields.io/npm/l/graphql-parse-resolve-info.svg)\n[![Follow](https://img.shields.io/badge/twitter-@GraphileHQ-blue.svg)](https://twitter.com/GraphileHQ)\n\nParses a `GraphQLResolveInfo` object into a tree of the fields that are being\nrequested to enable optimisations to your GraphQL schema (e.g. to determine\nwhich fields are required from the SQL database).\n\nUseful for optimising your GraphQL resolvers by allowing them to look ahead in\nthe request, reducing the number of SQL queries or HTTP requests required to\ncomplete the GraphQL request.\n\nAlso provides a quick way to get the alias of the current field being resolved.\n\n<!-- SPONSORS_BEGIN -->\n\n## Crowd-funded open-source software\n\nTo help us develop this software sustainably under the MIT license, we ask\nall individuals and businesses that use it to help support its ongoing\nmaintenance and development via sponsorship.\n\n### [Click here to find out more about sponsors and sponsorship.](https://www.graphile.org/sponsor/)\n\nAnd please give some love to our featured sponsors ðŸ¤©:\n\n<table><tr>\n<td align=\"center\"><a href=\"http://chads.website/\"><img src=\"https://www.graphile.org/images/sponsors/chadf.png\" width=\"90\" height=\"90\" alt=\"Chad Furman\" /><br />Chad Furman</a></td>\n<td align=\"center\"><a href=\"https://timescale.com/\"><img src=\"https://www.graphile.org/images/sponsors/timescale.svg\" width=\"90\" height=\"90\" alt=\"Timescale\" /><br />Timescale</a></td>\n</tr></table>\n\n<!-- SPONSORS_END -->\n\n## API\n\n### `parseResolveInfo(resolveInfo)`\n\nAlias: `parse`\n\nGets the tree of subfields of the current field that is being requested,\nreturning the following properties (recursively):\n\n- `name`: the name of the GraphQL field\n- `alias`: the alias this GraphQL field has been requested as, or if no alias was specified then the `name`\n- `args`: the arguments this field was called with; at the root level this\n  will be equivalent to the `args` that the `resolve(data, args, context, resolveInfo) {}` method receives, at deeper levels this allows you to get the\n  `args` for the nested fields without waiting for their resolvers to be called.\n- `fieldsByTypeName`: an object keyed by GraphQL object type names, where the\n  values are another object keyed by the aliases of the fields requested with\n  values of the same format as the root level (i.e. `{alias, name, args, fieldsByTypeName}`); see below for an example\n\nNote that because GraphQL supports interfaces a resolver may return items of\ndifferent types. For this reason, we key the fields by the GraphQL type name of\nthe various fragments that were requested into the `fieldsByTypeName` field.\n\nOnce you know which specific type the result is going to be, you can then use\nthis type (and its interfaces) to determine which sub-fields were requested -\nwe provide a `simplifyParsedResolveInfoFragmentWithType` helper to aid you with\nthis. In many cases you will know what type the result will be (because it can\nonly be one type) so you will probably use this helper heavily.\n\nExample usage:\n\n```js\nconst {\n\tparseResolveInfo,\n\tsimplifyParsedResolveInfoFragmentWithType\n} = require('graphql-parse-resolve-info');\n// or import { parseResolveInfo, simplifyParsedResolveInfoFragmentWithType } from 'graphql-parse-resolve-info';\n\nnew GraphQLObjectType({\n  name: ...\n  fields: {\n    ...\n    foo: {\n      type: new GraphQLNonNull(ComplexType),\n      resolve(data, args, context, resolveInfo) {\n        const parsedResolveInfoFragment = parseResolveInfo(resolveInfo);\n        const { fields } = simplifyParsedResolveInfoFragmentWithType(\n\t\t\t\t\tparsedResolveInfoFragment,\n\t\t\t\t\tComplexType\n\t\t\t\t);\n        console.dir(fields);\n        ...\n      }\n    }\n  }\n});\n```\n\n### `simplifyParsedResolveInfoFragmentWithType(parsedResolveInfoFragment, ReturnType)`\n\nAlias: `simplify`\n\nGiven an object of the form returned by `parseResolveInfo(...)` (which can be\nthe root-level instance, or it could be one of the nested subfields) and a\nGraphQL type this method will return an object of the form above, with an\nadditional field `fields` which only contains the fields compatible with the\nspecified `ReturnType`.\n\nOr, in other words, this simplifies the `fieldsByTypeName` to an object of only\nthe fields compatible with `ReturnType`.\n\nExample usage:\n\n```js\nconst {\n\tparseResolveInfo,\n\tsimplifyParsedResolveInfoFragmentWithType\n} = require('graphql-parse-resolve-info');\n\nnew GraphQLObjectType({\n  name: ...\n  fields: {\n    ...\n    foo: {\n      type: new GraphQLNonNull(ComplexType),\n      resolve(data, args, context, resolveInfo) {\n        const parsedResolveInfoFragment = parseResolveInfo(resolveInfo);\n\n        const { fields } = simplifyParsedResolveInfoFragmentWithType(\n\t\t\t\t\tparsedResolveInfoFragment,\n\t\t\t\t\tComplexType\n\t\t\t\t);\n        ...\n      }\n    }\n  }\n});\n```\n\n### `getAliasFromResolveInfo(resolveInfo)`\n\nAlias: `getAlias`\n\nReturns the alias of the field being requested (or, if no alias was specified,\nthen the name of the field).\n\nExample:\n\n```js\nconst { getAliasFromResolveInfo } = require('graphql-parse-resolve-info');\n\nnew GraphQLObjectType({\n  name: ...\n  fields: {\n    ...\n    foo: {\n      type: new GraphQLNonNull(GraphQLString),\n      resolve(data, args, context, resolveInfo) {\n        const alias = getAliasFromResolveInfo(resolveInfo);\n        return alias;\n      }\n    }\n  }\n});\n```\n\n## Example\n\nFor the following GraphQL query:\n\n```graphql\n{\n  allPosts {\n    edges {\n      cursor\n      node {\n        ...PostDetails\n        author: personByAuthorId {\n          firstPost {\n            ...PostDetails\n          }\n          friends {\n            nodes {\n              ...PersonDetails\n            }\n            totalCount\n            pageInfo {\n              startCursor\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nfragment PersonDetails on Person {\n  id\n  name\n  firstName\n}\n\nfragment PostDetails on Post {\n  id\n  headline\n  headlineTrimmed\n  author: personByAuthorId {\n    ...PersonDetails\n  }\n}\n```\n\nThe following resolver in the `allPosts` field:\n\n```js\nconst Query = new GraphQLObjectType({\n  name: \"Query\",\n  fields: {\n    allPosts: {\n      type: new GraphQLNonNull(PostsConnection),\n      resolve(parent, args, context, resolveInfo) {\n        const parsedResolveInfoFragment = parseResolveInfo(resolveInfo);\n        const simplifiedFragment = simplifyParsedResolveInfoFragmentWithType(\n          parsedResolveInfoFragment,\n          resolveInfo.returnType\n        );\n        // ...\n      },\n    },\n\n    // ...\n  },\n});\n```\n\nhas `parsedResolveInfoFragment`:\n\n```js\n{ alias: 'allPosts',\n  name: 'allPosts',\n  args: {},\n  fieldsByTypeName:\n   { PostsConnection:\n      { edges:\n         { alias: 'edges',\n           name: 'edges',\n           args: {},\n           fieldsByTypeName:\n            { PostsEdge:\n               { cursor:\n                  { alias: 'cursor',\n                    name: 'cursor',\n                    args: {},\n                    fieldsByTypeName: {} },\n                 node:\n                  { alias: 'node',\n                    name: 'node',\n                    args: {},\n                    fieldsByTypeName:\n                     { Post:\n                        { id: { alias: 'id', name: 'id', args: {}, fieldsByTypeName: {} },\n                          headline:\n                           { alias: 'headline',\n                             name: 'headline',\n                             args: {},\n                             fieldsByTypeName: {} },\n                          headlineTrimmed:\n                           { alias: 'headlineTrimmed',\n                             name: 'headlineTrimmed',\n                             args: {},\n                             fieldsByTypeName: {} },\n                          author:\n                           { alias: 'author',\n                             name: 'personByAuthorId',\n                             args: {},\n                             fieldsByTypeName:\n                              { Person:\n                                 { id: { alias: 'id', name: 'id', args: {}, fieldsByTypeName: {} },\n                                   name: { alias: 'name', name: 'name', args: {}, fieldsByTypeName: {} },\n                                   firstName:\n                                    { alias: 'firstName',\n                                      name: 'firstName',\n                                      args: {},\n                                      fieldsByTypeName: {} },\n                                   firstPost:\n                                    { alias: 'firstPost',\n                                      name: 'firstPost',\n                                      args: {},\n                                      fieldsByTypeName:\n                                       { Post:\n                                          { id: { alias: 'id', name: 'id', args: {}, fieldsByTypeName: {} },\n                                            headline:\n                                             { alias: 'headline',\n                                               name: 'headline',\n                                               args: {},\n                                               fieldsByTypeName: {} },\n                                            headlineTrimmed:\n                                             { alias: 'headlineTrimmed',\n                                               name: 'headlineTrimmed',\n                                               args: {},\n                                               fieldsByTypeName: {} },\n                                            author:\n                                             { alias: 'author',\n                                               name: 'personByAuthorId',\n                                               args: {},\n                                               fieldsByTypeName:\n                                                { Person:\n                                                   { id: { alias: 'id', name: 'id', args: {}, fieldsByTypeName: {} },\n                                                     name: { alias: 'name', name: 'name', args: {}, fieldsByTypeName: {} },\n                                                     firstName:\n                                                      { alias: 'firstName',\n                                                        name: 'firstName',\n                                                        args: {},\n                                                        fieldsByTypeName: {} } } } } } } },\n                                   friends:\n                                    { alias: 'friends',\n                                      name: 'friends',\n                                      args: {},\n                                      fieldsByTypeName:\n                                       { PeopleConnection:\n                                          { nodes:\n                                             { alias: 'nodes',\n                                               name: 'nodes',\n                                               args: {},\n                                               fieldsByTypeName:\n                                                { Person:\n                                                   { id: { alias: 'id', name: 'id', args: {}, fieldsByTypeName: {} },\n                                                     name: { alias: 'name', name: 'name', args: {}, fieldsByTypeName: {} },\n                                                     firstName:\n                                                      { alias: 'firstName',\n                                                        name: 'firstName',\n                                                        args: {},\n                                                        fieldsByTypeName: {} } } } },\n                                            totalCount:\n                                             { alias: 'totalCount',\n                                               name: 'totalCount',\n                                               args: {},\n                                               fieldsByTypeName: {} },\n                                            pageInfo:\n                                             { alias: 'pageInfo',\n                                               name: 'pageInfo',\n                                               args: {},\n                                               fieldsByTypeName:\n                                                { PageInfo:\n                                                   { startCursor:\n                                                      { alias: 'startCursor',\n                                                        name: 'startCursor',\n                                                        args: {},\n                                                        fieldsByTypeName: {} } } } } } } } } } } } } } } } } } },\n```\n\nand the simplified `simplifiedFragment` is the same as\n`parsedResolveInfoFragment`, but with the additional root-level property\n`fields` which compresses the root-level property `fieldsByTypeName` to a\nsingle-level object containing only the fields compatible with\n`resolveInfo.returnType` (in this case: only `edges`):\n\n```js\n{ alias: 'allPosts',\n  name: 'allPosts',\n  args: {},\n  fieldsByTypeName:\n\t\t...as before...\n  fields:\n   { edges:\n      { alias: 'edges',\n        name: 'edges',\n        args: {},\n        fieldsByTypeName:\n           ...as before...\n```\n\n## Thanks\n\nThis project was originally based on https://github.com/tjmehta/graphql-parse-fields, but has evolved a lot since then.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/graphile/graphile-build.git"
  },
  "scripts": {
    "prepack": "mkdir -p node8plus && tsc && tsc --target esnext --lib esnext --outDir build-turbo --declarationDir build-turbo",
    "test": "jest",
    "watch": "mkdir -p node8plus && tsc --watch"
  },
  "types": "node8plus/index.d.ts",
  "version": "4.4.5"
}
