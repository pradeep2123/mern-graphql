{
  "_args": [
    [
      {
        "raw": "dicer@0.3.0",
        "scope": null,
        "escapedName": "dicer",
        "name": "dicer",
        "rawSpec": "0.3.0",
        "spec": "0.3.0",
        "type": "version"
      },
      "F:\\react-node\\postgres-express-react-node-tutorial\\node_modules\\busboy"
    ]
  ],
  "_from": "dicer@0.3.0",
  "_hasShrinkwrap": false,
  "_id": "dicer@0.3.0",
  "_integrity": "",
  "_location": "/dicer",
  "_nodeVersion": "10.15.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/dicer_0.3.0_1547076014634_0.003573188182935505"
  },
  "_npmUser": {
    "name": "mscdex",
    "email": "mscdex@mscdex.net"
  },
  "_npmVersion": "6.4.1",
  "_phantomChildren": {},
  "_requested": {
    "raw": "dicer@0.3.0",
    "scope": null,
    "escapedName": "dicer",
    "name": "dicer",
    "rawSpec": "0.3.0",
    "spec": "0.3.0",
    "type": "version"
  },
  "_requiredBy": [
    "/busboy"
  ],
  "_resolved": "https://registry.npmjs.org/dicer/-/dicer-0.3.0.tgz",
  "_shasum": "eacd98b3bfbf92e8ab5c2fdb71aaac44bb06b872",
  "_shrinkwrap": null,
  "_spec": "dicer@0.3.0",
  "_where": "F:\\react-node\\postgres-express-react-node-tutorial\\node_modules\\busboy",
  "author": {
    "name": "Brian White",
    "email": "mscdex@mscdex.net"
  },
  "bugs": {
    "url": "https://github.com/mscdex/dicer/issues"
  },
  "dependencies": {
    "streamsearch": "0.1.2"
  },
  "description": "A very fast streaming multipart parser for node.js",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "integrity": "sha512-MdceRRWqltEG2dZqO769g27N/3PXfcKl04VhYnBlo2YhH7zPi88VebsjTKclaOyiuMaGU72hTfw3VkUitGcVCA==",
    "shasum": "eacd98b3bfbf92e8ab5c2fdb71aaac44bb06b872",
    "tarball": "https://registry.npmjs.org/dicer/-/dicer-0.3.0.tgz",
    "fileCount": 72,
    "unpackedSize": 61859,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcNoGvCRA9TVsSAnZWagAAJioP/RxmLF5IwLznwT0cZ9g1\nWlYMGPvDRlbQ1TSHOXm9lwYFWgCjtZUhPkB+5mopRTJGaIUmIfshmepf2iyw\nDdznLb06t0UauTitIlHpmrWyCVjeeMBE999/8sYZ2mawb9KDAXuivZl92Uvn\n7JwHt2qgeF2WkaXx2GqZTVepWsCyBfY6BRUNWW0Pm/jbCtIAc9TfMBTWfdNZ\nsvpp6rbeGLQ8D4IIm2W31QreNZVpvLNm5fHn/pbXpG3XHxbj7NtWxSNS02Y1\nNQS4F0XcIz14P1hGAWI8o2FWJwAtQvJGkp41TucoO3ClI9GoyRAnCqOlAfF3\nghCQoGkuOoC7Wwl3V1ZJ8t23w8CRW2JCgZQ1CRM+po2+3KNLHJjDYgCDeyd6\nAWar/zXfh6nXNBPP+oCPSOttYdn6wH47EfvqxE3eolgTxpvH0IbhsRA9+YeE\n/uxjHpKpGHLQr5IWo059p/vc9SikwgqqCw8pSuGlo9we4ziipbA11D1p9dRS\nDrOJFej6N9zygFlpy4a0q9afNoNOti7F5YUcJrKqLl0D5j/SMiP+ViG1e+Zv\nUyfmH/ABbuN8qByqRQNGvrjRZxJE7EVWB5B+8MSQhWjTeVmp0V5589/SbC9O\niRid7occZE8t7D8Sd0wjBi2vhi4orqMVh22UUxJY9KcC2qtMm3BkrZ2owg6k\nDY6M\r\n=Ca17\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "engines": {
    "node": ">=4.5.0"
  },
  "homepage": "https://github.com/mscdex/dicer#readme",
  "keywords": [
    "parser",
    "parse",
    "parsing",
    "multipart",
    "form-data",
    "streaming"
  ],
  "licenses": [
    {
      "type": "MIT",
      "url": "http://github.com/mscdex/dicer/raw/master/LICENSE"
    }
  ],
  "main": "./lib/Dicer",
  "maintainers": [
    {
      "name": "mscdex",
      "email": "mscdex@mscdex.net"
    }
  ],
  "name": "dicer",
  "optionalDependencies": {},
  "readme": "\nDescription\n===========\n\nA very fast streaming multipart parser for node.js.\n\nBenchmarks can be found [here](https://github.com/mscdex/dicer/wiki/Benchmarks).\n\n\nRequirements\n============\n\n* [node.js](http://nodejs.org/) -- v4.5.0 or newer\n\n\nInstall\n============\n\n    npm install dicer\n\n\nExamples\n========\n\n* Parse an HTTP form upload\n\n```javascript\nvar inspect = require('util').inspect,\n    http = require('http');\n\nvar Dicer = require('dicer');\n\n    // quick and dirty way to parse multipart boundary\nvar RE_BOUNDARY = /^multipart\\/.+?(?:; boundary=(?:(?:\"(.+)\")|(?:([^\\s]+))))$/i,\n    HTML = Buffer.from('<html><head></head><body>\\\n                        <form method=\"POST\" enctype=\"multipart/form-data\">\\\n                         <input type=\"text\" name=\"textfield\"><br />\\\n                         <input type=\"file\" name=\"filefield\"><br />\\\n                         <input type=\"submit\">\\\n                        </form>\\\n                        </body></html>'),\n    PORT = 8080;\n\nhttp.createServer(function(req, res) {\n  var m;\n  if (req.method === 'POST'\n      && req.headers['content-type']\n      && (m = RE_BOUNDARY.exec(req.headers['content-type']))) {\n    var d = new Dicer({ boundary: m[1] || m[2] });\n\n    d.on('part', function(p) {\n      console.log('New part!');\n      p.on('header', function(header) {\n        for (var h in header) {\n          console.log('Part header: k: ' + inspect(h)\n                      + ', v: ' + inspect(header[h]));\n        }\n      });\n      p.on('data', function(data) {\n        console.log('Part data: ' + inspect(data.toString()));\n      });\n      p.on('end', function() {\n        console.log('End of part\\n');\n      });\n    });\n    d.on('finish', function() {\n      console.log('End of parts');\n      res.writeHead(200);\n      res.end('Form submission successful!');\n    });\n    req.pipe(d);\n  } else if (req.method === 'GET' && req.url === '/') {\n    res.writeHead(200);\n    res.end(HTML);\n  } else {\n    res.writeHead(404);\n    res.end();\n  }\n}).listen(PORT, function() {\n  console.log('Listening for requests on port ' + PORT);\n});\n```\n\n\nAPI\n===\n\n_Dicer_ is a _WritableStream_\n\nDicer (special) events\n----------------------\n\n* **finish**() - Emitted when all parts have been parsed and the Dicer instance has been ended.\n\n* **part**(< _PartStream_ >stream) - Emitted when a new part has been found.\n\n* **preamble**(< _PartStream_ >stream) - Emitted for preamble if you should happen to need it (can usually be ignored).\n\n* **trailer**(< _Buffer_ >data) - Emitted when trailing data was found after the terminating boundary (as with the preamble, this can usually be ignored too).\n\n\nDicer methods\n-------------\n\n* **(constructor)**(< _object_ >config) - Creates and returns a new Dicer instance with the following valid `config` settings:\n\n    * **boundary** - _string_ - This is the boundary used to detect the beginning of a new part.\n\n    * **headerFirst** - _boolean_ - If true, preamble header parsing will be performed first.\n\n    * **maxHeaderPairs** - _integer_ - The maximum number of header key=>value pairs to parse **Default:** 2000 (same as node's http).\n\n* **setBoundary**(< _string_ >boundary) - _(void)_ - Sets the boundary to use for parsing and performs some initialization needed for parsing. You should only need to use this if you set `headerFirst` to true in the constructor and are parsing the boundary from the preamble header.\n\n\n\n_PartStream_ is a _ReadableStream_\n\nPartStream (special) events\n---------------------------\n\n* **header**(< _object_ >header) - An object containing the header for this particular part. Each property value is an _array_ of one or more string values.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/mscdex/dicer.git"
  },
  "scripts": {
    "test": "node test/test.js"
  },
  "version": "0.3.0"
}
