{
  "_args": [
    [
      {
        "raw": "helmet-csp@2.9.2",
        "scope": null,
        "escapedName": "helmet-csp",
        "name": "helmet-csp",
        "rawSpec": "2.9.2",
        "spec": "2.9.2",
        "type": "version"
      },
      "F:\\react-node\\postgres-express-react-node-tutorial\\node_modules\\helmet"
    ]
  ],
  "_from": "helmet-csp@2.9.2",
  "_hasShrinkwrap": false,
  "_id": "helmet-csp@2.9.2",
  "_location": "/helmet-csp",
  "_nodeVersion": "12.10.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/helmet-csp_2.9.2_1569002282338_0.9039083505542544"
  },
  "_npmUser": {
    "name": "evanhahn",
    "email": "me@evanhahn.com"
  },
  "_npmVersion": "6.11.3",
  "_phantomChildren": {},
  "_requested": {
    "raw": "helmet-csp@2.9.2",
    "scope": null,
    "escapedName": "helmet-csp",
    "name": "helmet-csp",
    "rawSpec": "2.9.2",
    "spec": "2.9.2",
    "type": "version"
  },
  "_requiredBy": [
    "/helmet"
  ],
  "_resolved": "https://registry.npmjs.org/helmet-csp/-/helmet-csp-2.9.2.tgz",
  "_shasum": "bec0adaf370b0f2e77267c9d8b6e33b34159c1e5",
  "_shrinkwrap": null,
  "_spec": "helmet-csp@2.9.2",
  "_where": "F:\\react-node\\postgres-express-react-node-tutorial\\node_modules\\helmet",
  "author": {
    "name": "Adam Baldwin",
    "email": "adam@npmjs.com",
    "url": "https://evilpacket.net"
  },
  "bugs": {
    "url": "https://github.com/helmetjs/csp/issues",
    "email": "me@evanhahn.com"
  },
  "contributors": [
    {
      "name": "Evan Hahn",
      "email": "me@evanhahn.com",
      "url": "https://evanhahn.com"
    },
    {
      "name": "Ryan Cannon",
      "email": "ryan@ryancannon.com",
      "url": "https://ryancannon.com"
    }
  ],
  "dependencies": {
    "bowser": "^2.6.1",
    "camelize": "1.0.0",
    "content-security-policy-builder": "2.1.0",
    "dasherize": "2.0.0"
  },
  "description": "Content Security Policy middleware.",
  "devDependencies": {
    "@types/connect": "^3.4.32",
    "@types/jest": "^24.0.18",
    "@types/supertest": "^2.0.7",
    "@typescript-eslint/eslint-plugin": "^2.3.0",
    "@typescript-eslint/parser": "^2.3.0",
    "connect": "^3.7.0",
    "content-security-policy-parser": "^0.3.0",
    "eslint": "^5.16.0",
    "eslint-config-helmet": "^0.2.0",
    "jest": "^24.9.0",
    "supertest": "^4.0.2",
    "ts-jest": "^24.1.0",
    "typescript": "^3.6.3"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-Lt5WqNfbNjEJ6ysD4UNpVktSyjEKfU9LVJ1LaFmPfYseg/xPealPfgHhtqdAdjPDopp5zbg/VWCyp4cluMIckw==",
    "shasum": "bec0adaf370b0f2e77267c9d8b6e33b34159c1e5",
    "tarball": "https://registry.npmjs.org/helmet-csp/-/helmet-csp-2.9.2.tgz",
    "fileCount": 23,
    "unpackedSize": 33092,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdhRMrCRA9TVsSAnZWagAAM/MP/jryTNxH8VA5zU/On/gD\nW+gJVCdnfqaNVAkAWigcebmVkjUwLF34uI98ArfeuwfMZf+GAFQ7ova3ReBH\npYUNAxaFTsxQke7G3gdY4Stl/C0/VIXkuXMtIeigj9RxnJxQeq8tQFPg42mZ\nMQbafstBYWThyfo0Kd4SHR7Ecg1OyPyhuqhZh7Ecvuk5P8xZP39PUiZvCobR\ni7FyBbyPdKioI4LSwy4Gt2EKIIEqg3+FinW+tk82L2q00fFUYbqH9hsd3n9E\ntvthgWmHYHdXVBjjDhvP4cqvGYvCpBHMCG+7nKYujP2++2rB6EIlxfjFerSz\nQEy0ZJbRMPb5pqhi4DArHDNljnfaAeZj4lQrKJUgcomIDjTF4ftMWSnj+TnU\nAPdKqYAnEHORPwaeZ+0OPfKaHFLldpZ5vuyeqRLW793YuNisAeMl59784aFc\nypQvs5Fw/09eSRr+u3IHkkpwuCb2dul5e0suaxSKq+J9zGOUGpRx/PVy1Ks6\njH3KsZg3BCvXMu/sKd+wuy//rIl/f+251kmOCtGp6BZ6Vp1NEbNsNPaeKg5+\nr6JBVhDox7w3A0eybRDALmnCGFynlt5D1OFDm7B2HVwHNlj3TsqqPYHJYM+w\niwjFAumzDSaXJ8M3jdC8kwnM8ndYjb/4volkfNOJwYxrnwAU4tFHSSBUuirL\nqVZ7\r\n=a4pC\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "engines": {
    "node": ">=4.0.0"
  },
  "files": [
    "CHANGELOG.md",
    "LICENSE",
    "README.md",
    "dist/index.js",
    "dist/index.d.ts",
    "dist/lib/**/*.js"
  ],
  "gitHead": "caca0ea4f5959a2e8ae07f094338d1b4e478dd73",
  "homepage": "https://helmetjs.github.io/docs/csp/",
  "keywords": [
    "helmet",
    "security",
    "express",
    "connect",
    "content",
    "policy",
    "csp",
    "xss"
  ],
  "license": "MIT",
  "main": "./dist/index.js",
  "maintainers": [
    {
      "name": "evanhahn",
      "email": "me@evanhahn.com"
    }
  ],
  "name": "helmet-csp",
  "optionalDependencies": {},
  "readme": "Content Security Policy middleware\n==================================\n[![Build Status](https://travis-ci.org/helmetjs/csp.svg?branch=master)](https://travis-ci.org/helmetjs/csp)\n\nContent Security Policy helps prevent unwanted content being injected into your webpages; this can mitigate cross-site scripting (XSS) vulnerabilities, malicious frames, unwanted trackers, and more. If you want to learn how CSP works, check out the fantastic [HTML5 Rocks guide](http://www.html5rocks.com/en/tutorials/security/content-security-policy/), the [Content Security Policy Reference](http://content-security-policy.com/), and the [Content Security Policy specification](http://www.w3.org/TR/CSP/). This module helps set Content Security Policies.\n\nUsage:\n\n```javascript\nconst csp = require('helmet-csp')\n\napp.use(csp({\n  // Specify directives as normal.\n  directives: {\n    defaultSrc: [\"'self'\", 'default.com'],\n    scriptSrc: [\"'self'\", \"'unsafe-inline'\"],\n    styleSrc: ['style.com'],\n    fontSrc: [\"'self'\", 'fonts.com'],\n    imgSrc: ['img.com', 'data:'],\n    sandbox: ['allow-forms', 'allow-scripts'],\n    reportUri: '/report-violation',\n    objectSrc: [\"'none'\"],\n    upgradeInsecureRequests: true,\n    workerSrc: false  // This is not set.\n  },\n\n  // This module will detect common mistakes in your directives and throw errors\n  // if it finds any. To disable this, enable \"loose mode\".\n  loose: false,\n\n  // Set to true if you only want browsers to report errors, not block them.\n  // You may also set this to a function(req, res) in order to decide dynamically\n  // whether to use reportOnly mode, e.g., to allow for a dynamic kill switch.\n  reportOnly: false,\n\n  // Set to true if you want to blindly set all headers: Content-Security-Policy,\n  // X-WebKit-CSP, and X-Content-Security-Policy.\n  setAllHeaders: false,\n\n  // Set to true if you want to disable CSP on Android where it can be buggy.\n  disableAndroid: false,\n\n  // Set to false if you want to completely disable any user-agent sniffing.\n  // This may make the headers less compatible but it will be much faster.\n  // This defaults to `true`.\n  browserSniff: true\n}))\n```\n\nThere are a lot of inconsistencies in how browsers implement CSP. Helmet looks at the user-agent of the browser and sets the appropriate header and value for that browser. If no user-agent is matched, it will set _all_ the headers with the 2.0 spec.\n\nSupported directives\n--------------------\n\nDirectives can be kebab-cased (like `script-src`) or camel-cased (like `scriptSrc`); they are equivalent.\n\nThe following directives are supported:\n\n* `base-uri` or `baseUri`\n* `block-all-mixed-content` or `blockAllMixedContent`\n* `child-src` or `childSrc`\n* `connect-src` or `connectSrc`\n* `default-src` or `defaultSrc`\n* `font-src` or `fontSrc`\n* `form-action` or `formAction`\n* `frame-ancestors` or `frameAncestors`\n* `frame-src` or `frameSrc`\n* `img-src` or `imgSrc`\n* `manifest-src` or `manifestSrc`\n* `media-src` or `mediaSrc`\n* `object-src` or `objectSrc`\n* `plugin-types` or `pluginTypes`\n* `prefetch-src` or `prefetchSrc`\n* `report-to` or `reportTo`\n* `report-uri` or `reportUri`\n* `require-sri-for` or `requireSriFor`\n* `sandbox` or `sandbox`\n* `script-src` or `scriptSrc`\n* `style-src` or `styleSrc`\n* `upgrade-insecure-requests` or `upgradeInsecureRequests`\n* `worker-src` or `workerSrc`\n\nHandling CSP violations\n-----------------------\n\nIf you've specified a `reportUri`, browsers will POST any CSP violations to your server. Here's a simple example of a route that handles those reports:\n\n```js\n// You need a JSON parser first.\napp.use(bodyParser.json({\n  type: ['json', 'application/csp-report']\n}))\n\napp.post('/report-violation', (req, res) => {\n  if (req.body) {\n    console.log('CSP Violation: ', req.body)\n  } else {\n    console.log('CSP Violation: No data received!')\n  }\n  res.status(204).end()\n})\n```\n\nNot all browsers send CSP violations in the same way, so this might require a little work.\n\n*Note*: If you're using a CSRF module like [csurf](https://github.com/expressjs/csurf), you might have problems handling these violations without a valid CSRF token. The fix is to put your CSP report route *above* csurf middleware.\n\nGenerating nonces\n-----------------\n\nYou can dynamically generate nonces to allow inline `<script>` tags to be safely evaluated. Here's a simple example:\n\n```js\nconst crypto = require('crypto')\n\napp.use(function (req, res, next) {\n  res.locals.nonce = crypto.randomBytes(16).toString('hex')\n  next()\n})\n\napp.use(csp({\n  directives: {\n    scriptSrc: [\n      \"'self'\",\n      (req, res) => `'nonce-${res.locals.nonce}'`  // 'nonce-348c18b14aaf3e00938d8bdd613f1149'\n    ]\n  }\n}))\n\napp.use((req, res) => {\n  res.end(`<script nonce=\"${res.locals.nonce}\">alert(1 + 1);</script>`)\n})\n```\n\nUsing CSP with a CDN\n--------------------\n\nThe default behavior of CSP is generate headers tailored for the browser that's requesting your page. If you have a CDN in front of your application, the CDN may cache the wrong headers, rendering your CSP useless. Make sure to eschew a CDN when using this module or set the `browserSniff` option to `false`.\n\nSee also\n--------\n\n* [Google's CSP Evaluator tool](https://csp-evaluator.withgoogle.com/)\n* [GitHub's CSP journey](http://githubengineering.com/githubs-csp-journey/)\n* [Content Security Policy for Single Page Web Apps](https://corner.squareup.com/2016/05/content-security-policy-single-page-app.html)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/helmetjs/csp.git"
  },
  "scripts": {
    "build": "npm run clean && tsc",
    "clean": "rm -rf dist",
    "generate-supported-directives-docs": "./scripts/generate_supported_directives_docs",
    "lint": "eslint --fix '**/*.ts'",
    "prepublishOnly": "npm run build",
    "pretest": "npm run lint",
    "test": "jest --config test/jest-config.json"
  },
  "typings": "./dist/index.d.ts",
  "version": "2.9.2"
}
