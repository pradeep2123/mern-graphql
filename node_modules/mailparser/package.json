{
  "_args": [
    [
      {
        "raw": "mailparser@^0.6.1",
        "scope": null,
        "escapedName": "mailparser",
        "name": "mailparser",
        "rawSpec": "^0.6.1",
        "spec": ">=0.6.1 <0.7.0",
        "type": "range"
      },
      "F:\\react-node\\mern-graphql\\node_modules\\sendgrid"
    ]
  ],
  "_from": "mailparser@>=0.6.1 <0.7.0",
  "_id": "mailparser@0.6.2",
  "_inCache": true,
  "_location": "/mailparser",
  "_nodeVersion": "6.9.1",
  "_npmOperationalInternal": {
    "host": "packages-18-east.internal.npmjs.com",
    "tmp": "tmp/mailparser-0.6.2.tgz_1485098137697_0.888595171039924"
  },
  "_npmUser": {
    "name": "andris",
    "email": "andris@kreata.ee"
  },
  "_npmVersion": "3.10.8",
  "_phantomChildren": {},
  "_requested": {
    "raw": "mailparser@^0.6.1",
    "scope": null,
    "escapedName": "mailparser",
    "name": "mailparser",
    "rawSpec": "^0.6.1",
    "spec": ">=0.6.1 <0.7.0",
    "type": "range"
  },
  "_requiredBy": [
    "/sendgrid"
  ],
  "_resolved": "https://registry.npmjs.org/mailparser/-/mailparser-0.6.2.tgz",
  "_shasum": "03c486039bdf4df6cd3b6adcaaac4107dfdbc068",
  "_shrinkwrap": null,
  "_spec": "mailparser@^0.6.1",
  "_where": "F:\\react-node\\mern-graphql\\node_modules\\sendgrid",
  "author": {
    "name": "Andris Reinman"
  },
  "bugs": {
    "url": "https://github.com/andris9/mailparser/issues"
  },
  "dependencies": {
    "encoding": "^0.1.12",
    "mime": "^1.3.4",
    "mimelib": "^0.3.0",
    "uue": "^3.1.0"
  },
  "deprecated": "Mailparser versions older than v2.3.0 are deprecated",
  "description": "Asynchronous and non-blocking parser for mime encoded e-mail messages",
  "devDependencies": {
    "nodeunit": "^0.10.2"
  },
  "directories": {},
  "dist": {
    "shasum": "03c486039bdf4df6cd3b6adcaaac4107dfdbc068",
    "tarball": "https://registry.npmjs.org/mailparser/-/mailparser-0.6.2.tgz"
  },
  "gitHead": "b8488c5b6a73920b58bcd2f62a5c3be115940fe4",
  "homepage": "https://github.com/andris9/mailparser#readme",
  "keywords": [
    "e-mail",
    "mime",
    "parser"
  ],
  "license": "MIT",
  "main": "./lib/mailparser",
  "maintainers": [
    {
      "name": "andris",
      "email": "andris@node.ee"
    }
  ],
  "name": "mailparser",
  "optionalDependencies": {},
  "readme": "MailParser\n==========\n\n[![Build Status](https://api.travis-ci.org/andris9/mailparser.svg)](http://travis-ci.org/andris9/mailparser)\n[![NPM version](https://badge.fury.io/js/mailparser.svg)](http://badge.fury.io/js/mailparser)\n\n**MailParser** is an asynchronous and non-blocking parser for\n[node.js](http://nodejs.org) to parse mime encoded e-mail messages.\nHandles even large attachments with ease - attachments can be parsed\nin chunks and streamed if needed.\n\n### Community version\n\nThis module is unmaintained. For an upgrade see [Mailparser2](https://gitlab.com/nodemailer/mailparser2). The upgraded version is more effective, has vastly better stream handling through Streams3 interface and is able to build up more accurate versions of HTML and Text contents.\n\n### Usage\n\n**MailParser** parses raw source of e-mail messages into a structured object.\n\nNo need to worry about charsets or decoding *quoted-printable* or\n*base64* data, **MailParser** does all of it for you. All the textual output\nfrom **MailParser** (subject line, addressee names, message body) is always UTF-8.\n\nFor a 25MB e-mail it takes less than a second to parse if attachments are not streamed but buffered and about 3-4 seconds if they are streamed. Expect high RAM usage though if you do not stream the attachments.\n\nIf you want to send e-mail instead of parsing it, check out my other module [Nodemailer](https://github.com/andris9/Nodemailer).\n\n## ICONV NOTICE\n\nSince v0.4 `node-iconv` is not included by default as a dependency. If you need to support encodings not covered by `iconv-lite` you should add `iconv` as a dependency to your own project so `mailparser` could pick it up.\n\n## Support mailparser development\n\n[![Donate to author](https://www.paypalobjects.com/en_US/i/btn/btn_donate_SM.gif)](https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=DB26KWR2BQX5W)\n\nInstallation\n------------\n\n    npm install mailparser\n\nUsage\n-----\n\nRequire MailParser module\n```javascript\nvar MailParser = require(\"mailparser\").MailParser;\n```\nCreate a new MailParser object\n```javascript\nvar mailparser = new MailParser([options]);\n```\nOptions parameter is an object with the following properties:\n\n  * **debug** - if set to true print all incoming lines to console\n  * **streamAttachments** - if set to true, stream attachments instead of including them\n  * **unescapeSMTP** - if set to true replace double dots in the beginning of the file\n  * **defaultCharset** - the default charset for *text/plain* and *text/html* content, if not set reverts to *Latin-1*\n  * **showAttachmentLinks** - if set to true, show inlined attachment links `<a href=\"cid:...\">filename</a>`\n\nMailParser object is a writable Stream - you can pipe directly\nfiles to it or you can send chunks with `mailparser.write`\n\nWhen the headers have received, \"headers\" is emitted. The headers have not been pre-processed (except that mime words have been converted to UTF-8 text).\n\n```javascript\nmailparser.on(\"headers\", function(headers){\n    console.log(headers.received);\n});\n```\nWhen the parsing ends an `'end'` event is emitted which has an\nobject with parsed e-mail structure as a parameter.\n\n```javascript\nmailparser.on(\"end\", function(mail){\n    mail; // object structure for parsed e-mail\n});\n```\n### Parsed mail object\n\n  * **headers** - unprocessed headers in the form of - `{key: value}` - if there were multiple fields with the same key then the value is an array\n  * **from** - an array of parsed `From` addresses - `[{address:'sender@example.com',name:'Sender Name'}]` (should be only one though)\n  * **to** - an array of parsed `To` addresses\n  * **cc** - an array of parsed `Cc` addresses\n  * **bcc** - an array of parsed 'Bcc' addresses\n  * **subject** - the subject line\n  * **references** - an array of reference message id values (not set if no reference values present)\n  * **inReplyTo** - an array of In-Reply-To message id values (not set if no in-reply-to values present)\n  * **priority** - priority of the e-mail, always one of the following: *normal* (default), *high*, *low*\n  * **text** - text body\n  * **html** - html body\n  * **date** - date field as a `Date()` object. If date could not be resolved or is not found this field is not set. Check the original date string from `headers.date`\n  * **attachments** - an array of attachments\n\n### Decode a simple e-mail\n\nThis example decodes an e-mail from a string\n\n```javascript\nvar MailParser = require(\"mailparser\").MailParser;\nvar mailparser = new MailParser();\n\nvar email = \"From: 'Sender Name' <sender@example.com>\\r\\n\"+\n            \"To: 'Receiver Name' <receiver@example.com>\\r\\n\"+\n            \"Subject: Hello world!\\r\\n\"+\n            \"\\r\\n\"+\n            \"How are you today?\";\n\n// setup an event listener when the parsing finishes\nmailparser.on(\"end\", function(mail_object){\n    console.log(\"From:\", mail_object.from); //[{address:'sender@example.com',name:'Sender Name'}]\n    console.log(\"Subject:\", mail_object.subject); // Hello world!\n    console.log(\"Text body:\", mail_object.text); // How are you today?\n});\n\n// send the email source to the parser\nmailparser.write(email);\nmailparser.end();\n```\n### Pipe file to MailParser\n\nThis example pipes a `readableStream` file to **MailParser**\n```javascript\nvar MailParser = require(\"mailparser\").MailParser;\nvar mailparser = new MailParser();\nvar fs = require(\"fs\");\n\nmailparser.on(\"end\", function(mail_object){\n    console.log(\"Subject:\", mail_object.subject);\n});\n\nfs.createReadStream(\"email.eml\").pipe(mailparser);\n```\n### Attachments\n\nBy default any attachment found from the e-mail will be included fully in the\nfinal mail structure object as Buffer objects. With large files this might not\nbe desirable so optionally it is possible to redirect the attachments to a Stream\nand keep only the metadata about the file in the mail structure.\n\n```javascript\nmailparser.on(\"end\", function(mail_object){\n    mail_object.attachments.forEach(function(attachment){\n        console.log(attachment.fileName);\n    });\n});\n```\n#### Default behavior\n\nBy default attachments will be included in the attachment objects as Buffers.\n```javascript\nattachments = [{\n    contentType: 'image/png',\n    fileName: 'image.png',\n    contentDisposition: 'attachment',\n    contentId: '5.1321281380971@localhost',\n    transferEncoding: 'base64',\n    length: 126,\n    generatedFileName: 'image.png',\n    checksum: 'e4cef4c6e26037bcf8166905207ea09b',\n    content: <Buffer ...>\n}];\n```\nThe property `generatedFileName` is usually the same as `fileName` but if several\ndifferent attachments with the same name exist or there is no `fileName` set, an\nunique name is generated.\n\nProperty `content` is always a Buffer object (or SlowBuffer on some occasions)\n\n#### Attachment streaming\n\nAttachment streaming can be used when providing an optional options parameter\nto the `MailParser` constructor.\n```javascript\nvar mp = new MailParser({\n    streamAttachments: true\n}\n```\nThis way there will be no `content` property on final attachment objects\n(but the other fields will remain).\n\nTo catch the streams you should listen for `attachment` events on the MailParser\nobject. The parameter provided includes file information (`contentType`,\n`fileName`, `contentId`) and a readable Stream object `stream`.\n```javascript\nvar mp = new MailParser({\n    streamAttachments: true\n}\n\nmp.on(\"attachment\", function(attachment, mail){\n    var output = fs.createWriteStream(attachment.generatedFileName);\n    attachment.stream.pipe(output);\n});\n```\n`generatedFileName` is unique for the parsed mail - if several attachments with\nthe same name exist, `generatedFileName` is updated accordingly. Also there\nmight not be `fileName` parameter at all, so it is better to rely on\n`generatedFileName`.\n\n#### Testing attachment integrity\n\nAttachment objects include `length` property which is the length of the attachment\nin bytes and `checksum` property which is a `md5` hash of the file.\n\n### Running tests\n\nInstall **MailParser** with dev dependencies\n```bash\nnpm install --dev mailparser\n```\nAnd then run\n```bash\nnpm test mailparser\n```\nThere aren't many tests yet but basics should be covered.\n\n## Issues\n\n**S/MIME**\n\nCurrently it is not possible to verify signed content as the incoming text is\nsplit to lines when parsing and line ending characters are not preserved. One\ncan assume it is always \\r\\n but this might not be always the case.\n\n**Seeking**\n\nDue to the line based parsing it is also not possible to explicitly state\nthe beginning and ending bytes of the attachments for later source seeking.\nNode.js doesn't support the concept of seeking very well anyway.\n\n## License\n\n**MIT**\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/andris9/mailparser.git"
  },
  "scripts": {
    "test": "nodeunit test/"
  },
  "version": "0.6.2"
}
