{
  "_args": [
    [
      {
        "raw": "graphql-tag",
        "scope": null,
        "escapedName": "graphql-tag",
        "name": "graphql-tag",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "F:\\react-node\\postgres-express-react-node-tutorial"
    ]
  ],
  "_from": "graphql-tag",
  "_hasShrinkwrap": false,
  "_id": "graphql-tag@2.10.1",
  "_location": "/graphql-tag",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/graphql-tag_2.10.1_1547729124005_0.2634384024014551"
  },
  "_npmUser": {
    "name": "abernix",
    "email": "npmjs@jro.cc"
  },
  "_phantomChildren": {},
  "_requested": {
    "raw": "graphql-tag",
    "scope": null,
    "escapedName": "graphql-tag",
    "name": "graphql-tag",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/",
    "/apollo-boost",
    "/apollo-server-core"
  ],
  "_resolved": "https://registry.npmjs.org/graphql-tag/-/graphql-tag-2.10.1.tgz",
  "_shasum": "10aa41f1cd8fae5373eaf11f1f67260a3cad5e02",
  "_shrinkwrap": null,
  "_spec": "graphql-tag",
  "_where": "F:\\react-node\\postgres-express-react-node-tutorial",
  "author": "",
  "bugs": {
    "url": "https://github.com/apollostack/graphql-tag/issues"
  },
  "dependencies": {},
  "description": "A JavaScript template literal tag that parses GraphQL queries",
  "devDependencies": {
    "babel-preset-es2015": "^6.9.0",
    "babel-register": "^6.9.0",
    "chai": "^4.0.2",
    "graphql": "^14.0.2",
    "mocha": "^3.4.1",
    "rollup": "^0.45.0",
    "test-all-versions": "^3.3.2"
  },
  "directories": {},
  "dist": {
    "shasum": "10aa41f1cd8fae5373eaf11f1f67260a3cad5e02",
    "integrity": "sha512-jApXqWBzNXQ8jYa/HLkZJaVw9jgwNqZkywa2zfFn16Iv1Zb7ELNHkJaXHR7Quvd5SIGsy6Ny7SUKATgnu05uEg==",
    "tarball": "https://registry.npmjs.org/graphql-tag/-/graphql-tag-2.10.1.tgz",
    "fileCount": 21,
    "unpackedSize": 72308,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcQHjkCRA9TVsSAnZWagAAoGMP/0WdSICK6KVdIcQI4T0V\nFpPvCwJelC5ZF+AePwskV3kVj0tFyHDwu2v28UqqAl/ErpqDBJMqPze3ME5u\nja0O7bw+qtUlKKAF7NPSvzCm4CTKuuEOKSDH6SbZ53H42yVnXhgkh/IOG2Y1\nmT3JxqoOBSvFaie0XrToEAivYRqLxKiNbbdKoyWlvqZK6K6i/Ff0L0OVxmxI\nWfwBNlj2hsK/dfkH7ndPC9K7Dj/V7ExWUEt6YPtbKU7eW2xVBW5sliIXlVDc\nv1W4oGCJx4v/sSOLOTq4V0pG9QNXceHfViOSxdf22MOME4/uy32T5h/IM5D9\nXKSVzwgJrvv3ZjKegBJaGXqN6mwwSHZf2+2c8cie5PX5tTYcisvdad+XLYpg\n1iyWaig7Xv7TjBC5MRdRCFSpjFzLUZ5/8/v61jRIUyNH1JunoEHGB4rNTjX8\nKxr5Pmnzi56YH8xhqzNw3kC24K2LOIEThtK2misneCBxwdaYu55XmoTIKzo5\nFmb8JBiCQSrFwX/gW93k99A3QpA43nVu5Gvm+0IQBdG4zKj7lVeqLNUtcY5W\nj54jkCVqjEzbGgcbEWjKzsdGrfEW9Z4Uv3AaIRW/OR4r2RzBgsEXal/ydQe8\nw1xILfdeIWxE5btBI8JKe/Uj2IDh33Rtaq9VoCzAb7EDKT2eD2d1AI+tr42Y\njaV+\r\n=n2q7\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "homepage": "https://github.com/apollostack/graphql-tag#readme",
  "jsnext:main": "./src/index.js",
  "license": "MIT",
  "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2015 - 2018 Meteor Development Group, Inc.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n",
  "main": "./lib/graphql-tag.umd.js",
  "maintainers": [
    {
      "name": "apollo-bot",
      "email": "npm@apollographql.com"
    },
    {
      "name": "dhaivatpandya",
      "email": "dhaivatpandya@gmail.com"
    },
    {
      "name": "helfer",
      "email": "jonas@helfer.email"
    },
    {
      "name": "jnwng",
      "email": "j@jnwng.com"
    },
    {
      "name": "sashko",
      "email": "s.stubailo@gmail.com"
    },
    {
      "name": "tmeasday",
      "email": "tom@thesnail.org"
    }
  ],
  "module": "./src/index.js",
  "name": "graphql-tag",
  "optionalDependencies": {},
  "peerDependencies": {
    "graphql": "^0.9.0 || ^0.10.0 || ^0.11.0 || ^0.12.0 || ^0.13.0 || ^14.0.0"
  },
  "readme": "# graphql-tag\n[![npm version](https://badge.fury.io/js/graphql-tag.svg)](https://badge.fury.io/js/graphql-tag)\n[![Build Status](https://travis-ci.org/apollographql/graphql-tag.svg?branch=master)](https://travis-ci.org/apollographql/graphql-tag)\n[![Get on Slack](https://img.shields.io/badge/slack-join-orange.svg)](http://www.apollodata.com/#slack)\n\nHelpful utilities for parsing GraphQL queries. Includes:\n\n- `gql` A JavaScript template literal tag that parses GraphQL query strings into the standard GraphQL AST.\n- `/loader` A webpack loader to preprocess queries\n\n`graphql-tag` uses [the reference `graphql` library](https://github.com/graphql/graphql-js) under the hood as a peer dependency, so in addition to installing this module, you'll also have to install `graphql-js`.\n\n### gql\n\nThis is a template literal tag you can use to concisely write a GraphQL query that is parsed into the standard GraphQL AST:\n\n```js\nimport gql from 'graphql-tag';\n\nconst query = gql`\n  {\n    user(id: 5) {\n      firstName\n      lastName\n    }\n  }\n`\n\n// query is now a GraphQL syntax tree object\nconsole.log(query);\n\n// {\n//   \"kind\": \"Document\",\n//   \"definitions\": [\n//     {\n//       \"kind\": \"OperationDefinition\",\n//       \"operation\": \"query\",\n//       \"name\": null,\n//       \"variableDefinitions\": null,\n//       \"directives\": [],\n//       \"selectionSet\": {\n//         \"kind\": \"SelectionSet\",\n//         \"selections\": [\n//           {\n//             \"kind\": \"Field\",\n//             \"alias\": null,\n//             \"name\": {\n//               \"kind\": \"Name\",\n//               \"value\": \"user\",\n//               ...\n```\n\nYou can easily explore GraphQL ASTs on [astexplorer.net](https://astexplorer.net/#/drYr8X1rnP/1).\n\nThis package is the way to pass queries into [Apollo Client](https://github.com/apollostack/apollo-client). If you're building a GraphQL client, you can use it too!\n\n#### Why use this?\n\nGraphQL strings are the right way to write queries in your code, because they can be statically analyzed using tools like [eslint-plugin-graphql](https://github.com/apollostack/eslint-plugin-graphql). However, strings are inconvenient to manipulate, if you are trying to do things like add extra fields, merge multiple queries together, or other interesting stuff.\n\nThat's where this package comes in - it lets you write your queries with [ES2015 template literals](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals) and compile them into an AST with the `gql` tag.\n\n#### Caching parse results\n\nThis package only has one feature - it caches previous parse results in a simple dictionary. This means that if you call the tag on the same query multiple times, it doesn't waste time parsing it again. It also means you can use `===` to compare queries to check if they are identical.\n\n### Babel preprocessing\n\nGraphQL queries can be compiled at build time using [babel-plugin-graphql-tag](https://github.com/gajus/babel-plugin-graphql-tag). Pre-compiling queries decreases the script initialization time and reduces the bundle size by potentially removing the need for `graphql-tag` at runtime.\n\n#### TypeScript\nTry this custom transformer to pre-compile your GraphQL queries in TypeScript: [ts-transform-graphql-tag](https://github.com/firede/ts-transform-graphql-tag).\n\n#### React Native, Next.js\n\nAdditionally, in certain situations, preprocessing queries via the webpack loader is not possible. [babel-plugin-import-graphql](https://www.npmjs.com/package/babel-plugin-import-graphql) will allow one to import graphql files directly into your JavaScript by preprocessing GraphQL queries into ASTs at compile-time.\n\nE.g.:\n```javascript\nimport myImportedQuery from './productsQuery.graphql'\n\nclass ProductsPage extends React.Component {\n  ...\n}\n```\n\n#### Create-React-App\n\n`create-react-app@2.0.0` will [support the ability to preprocess queries](https://github.com/facebook/create-react-app/pull/3909) using `graphql-tag/loader` without the need to eject.\n\nIf you're using an older version of `create-react-app`, check out [react-app-rewire-inline-import-graphql-ast](https://www.npmjs.com/package/react-app-rewire-inline-import-graphql-ast) to preprocess queries without needing to eject.\n\n### Webpack preprocessing with `graphql-tag/loader`\n\nThis package also includes a [webpack loader](https://webpack.js.org/concepts/loaders). There are many benefits over this approach, which saves GraphQL ASTs processing time on client-side and enable queries to be separated from script over `.graphql` files.\n\n```js\nloaders: [\n  {\n    test: /\\.(graphql|gql)$/,\n    exclude: /node_modules/,\n    loader: 'graphql-tag/loader'\n  }\n]\n```\n\nthen:\n\n```js\nimport query from './query.graphql';\n\nconsole.log(query);\n// {\n//   \"kind\": \"Document\",\n// ...\n```\n\nTesting environments that don't support Webpack require additional configuration. For [Jest](https://facebook.github.io/jest/) use [jest-transform-graphql](https://github.com/remind101/jest-transform-graphql).\n\n#### Support for multiple operations\n\nWith the webpack loader, you can also import operations by name:\n\nIn a file called `query.gql`:\n```graphql\nquery MyQuery1 {\n  ...\n}\n\nquery MyQuery2 {\n  ...\n}\n```\n\nAnd in your JavaScript:\n```javascript\nimport { MyQuery1, MyQuery2 } from 'query.gql'\n```\n\n### Warnings\n\nThis package will emit a warning if you have multiple fragments of the same name. You can disable this with:\n\n```js\nimport { disableFragmentWarnings } from 'graphql-tag';\n\ndisableFragmentWarnings()\n```\n\n### Experimental Fragment Variables\n\nThis package exports an `experimentalFragmentVariables` flag that allows you to use experimental support for [parameterized fragments](https://github.com/facebook/graphql/issues/204).\n\nYou can enable / disable this with:\n```js\nimport { enableExperimentalFragmentVariables, disableExperimentalFragmentVariables } from 'graphql-tag';\n```\n\nEnabling this feature allows you declare documents of the form\n```graphql\nfragment SomeFragment ($arg: String!) on SomeType {\n  someField\n}\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/apollostack/graphql-tag.git"
  },
  "scripts": {
    "bundle": "rollup -c && cp src/index.js.flow lib/graphql-tag.umd.js.flow",
    "prepublish": "npm run bundle",
    "test": "mocha test/graphql.js test/graphql-v0.12.js && tav --ci --compat"
  },
  "version": "2.10.1"
}
