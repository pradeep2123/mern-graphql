{
  "_args": [
    [
      {
        "raw": "pg-sql2@^4.4.1-alpha.2",
        "scope": null,
        "escapedName": "pg-sql2",
        "name": "pg-sql2",
        "rawSpec": "^4.4.1-alpha.2",
        "spec": ">=4.4.1-alpha.2 <5.0.0",
        "type": "range"
      },
      "F:\\react-node\\postgres-express-react-node-tutorial\\node_modules\\postgraphile"
    ]
  ],
  "_from": "pg-sql2@^4.4.1-alpha.2",
  "_hasShrinkwrap": false,
  "_id": "pg-sql2@4.4.5",
  "_location": "/pg-sql2",
  "_nodeVersion": "10.16.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/pg-sql2_4.4.5_1569252619616_0.43647310344929346"
  },
  "_npmUser": {
    "name": "benjie",
    "email": "npm@benjiegillam.com"
  },
  "_npmVersion": "lerna/3.16.4/node@v10.16.0+x64 (linux)",
  "_phantomChildren": {},
  "_requested": {
    "raw": "pg-sql2@^4.4.1-alpha.2",
    "scope": null,
    "escapedName": "pg-sql2",
    "name": "pg-sql2",
    "rawSpec": "^4.4.1-alpha.2",
    "spec": ">=4.4.1-alpha.2 <5.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/graphile-build-pg",
    "/postgraphile"
  ],
  "_resolved": "https://registry.npmjs.org/pg-sql2/-/pg-sql2-4.4.5.tgz",
  "_shasum": "4e7699694eddd455c2a6218d03e011e63b1d0a6f",
  "_shrinkwrap": null,
  "_spec": "pg-sql2@^4.4.1-alpha.2",
  "_where": "F:\\react-node\\postgres-express-react-node-tutorial\\node_modules\\postgraphile",
  "author": {
    "name": "Benjie Gillam",
    "email": "benjie@jemjie.com"
  },
  "bugs": {
    "url": "https://github.com/graphile/graphile-engine/issues"
  },
  "dependencies": {
    "@graphile/lru": "4.4.5",
    "@types/pg": ">=6 <8",
    "debug": ">=3 <5"
  },
  "description": "Generate safe Postgres-compliant SQL with tagged template literals",
  "devDependencies": {
    "@types/debug": "4.1.5",
    "@types/node": "12.7.5",
    "jest": "24.9.0",
    "markdown-doctest": "^0.9.1",
    "prettier": "1.18.2",
    "ts-jest": "24.1.0",
    "ts-node": "8.4.1",
    "typescript": "3.6.3"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-8qXACinootFhIv9JnpfFzXn79K7sSw+ASx6a2RRqrrh2MV8ElLUTQene+yZm0KjDY4BhSq4ruNGO+CkdLLVglg==",
    "shasum": "4e7699694eddd455c2a6218d03e011e63b1d0a6f",
    "tarball": "https://registry.npmjs.org/pg-sql2/-/pg-sql2-4.4.5.tgz",
    "fileCount": 6,
    "unpackedSize": 28057,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdiOUMCRA9TVsSAnZWagAA5XYQAJKxspYP88eYZ2KcGuG1\nrv/4odrjUHOl4ZzB74yN8y8D3Gm/Idv0qOGSBo3c4+rP/k4hOpKtOBKsHVZH\nUtpKCbC2DhoCO0220AoSk0AzJ/Siv5RzYJB6wHwc14N+rs2G+NBdZTDUHIAZ\nQOLzI+UNI07u4kW34DVX2CAjEHmIlCLU6h5mIFX1aEunWq8sJRwnkn1bGS1k\nqn81u+OjJv6z+wCNKU/8Wyw+9QA3gCV/Nvpz6vbSJVu3rtQ9sFj+tALsFz8k\nVmA6ik3WUJQvgd/QaZwQh4rweHf1droZ5MrkLfmLBEZ7EfrSY2cW5qTxBreQ\nbBWo0FuJefJdA2snAyAjc7YY/uauazNse133hIlbgpUrkzK/jP2kCwOi0QNJ\nntDJjRCH6W7Jyo3/MD4+MMdRkwzDzTfTlN2SJNjaSDex4xwrUT3ZyJBr9pXV\nSCrRp7QIaZmfs3PA/0cY4K8gsywMvNu3H+BE5uoRhnQ8uqcAsm1nZ8lHmrEQ\nDo+CLkhqHobeA84bTpMYJQ3lxLX7x4ujnzzpYL1gncUFUAPSOuhw6n65kKA1\neaUuClLTw2p+Rufus5yAFqD8EAqNQ0I1XBEOVFQ3Xsp0AX+JN/OOATLCRhii\nk4cP5YceceizF8KoICvRhDvT6RLZ/+HUCX814CR156fuq7qOKuwcesaNe4lL\necVc\r\n=4WQo\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "engines": {
    "node": ">=8.6"
  },
  "files": [
    "node8plus"
  ],
  "gitHead": "b0e19c73f1f78c62c4be1a2974a4f2404c538aa5",
  "homepage": "https://github.com/graphile/graphile-build/tree/master/packages/pg-sql2",
  "jest": {
    "testRegex": "__tests__/.*\\.test\\.js$"
  },
  "keywords": [
    "sql",
    "injection",
    "pg",
    "postgres",
    "postgresql",
    "tagged",
    "template",
    "literal",
    "es6"
  ],
  "license": "MIT",
  "main": "node8plus/index.js",
  "maintainers": [
    {
      "name": "benjie",
      "email": "npm@benjiegillam.com"
    }
  ],
  "name": "pg-sql2",
  "optionalDependencies": {},
  "peerDependencies": {
    "pg": ">=6.1.0 <8"
  },
  "readme": "# pg-sql2\n\nCreate SQL in a powerful and flexible manner without opening yourself to SQL\ninjection attacks using the power of ES6 tagged template literals.\n\nA key aim of this library is to be very fast, if you think you can improve\nperformance further please open a PR!\n\n<!-- SPONSORS_BEGIN -->\n\n## Crowd-funded open-source software\n\nTo help us develop this software sustainably under the MIT license, we ask\nall individuals and businesses that use it to help support its ongoing\nmaintenance and development via sponsorship.\n\n### [Click here to find out more about sponsors and sponsorship.](https://www.graphile.org/sponsor/)\n\nAnd please give some love to our featured sponsors ðŸ¤©:\n\n<table><tr>\n<td align=\"center\"><a href=\"http://chads.website/\"><img src=\"https://www.graphile.org/images/sponsors/chadf.png\" width=\"90\" height=\"90\" alt=\"Chad Furman\" /><br />Chad Furman</a></td>\n<td align=\"center\"><a href=\"https://timescale.com/\"><img src=\"https://www.graphile.org/images/sponsors/timescale.svg\" width=\"90\" height=\"90\" alt=\"Timescale\" /><br />Timescale</a></td>\n</tr></table>\n\n<!-- SPONSORS_END -->\n\n## Usage\n\n```js\nconst sql = require(\"pg-sql2\");\n// or import sql from 'pg-sql2';\n\nconst tableName = \"user\";\nconst fields = [\"name\", \"age\", \"height\"];\n\n// sql.join is used to join fragments with a common separator, NOT to join tables!\nconst sqlFields = sql.join(\n  // sql.identifier safely escapes arguments and joins them with dots\n  fields.map(fieldName => sql.identifier(tableName, fieldName)),\n  \", \"\n);\n\n// sql.value will store the value and instead add a placeholder to the SQL\n// statement, to ensure that no SQL injection can occur.\nconst sqlConditions = sql.query`created_at > NOW() - interval '3 years' and age > ${sql.value(\n  22\n)}`;\n\n// This could be a full query, but we're going to embed it in another query safely\nconst innerQuery = sql.query`select ${sqlFields} from ${sql.identifier(\n  tableName\n)} where ${sqlConditions}`;\n\n// Symbols are automatically assigned unique identifiers\nconst sqlAlias = sql.identifier(Symbol());\n\nconst query = sql.query`\nwith ${sqlAlias} as (${innerQuery})\nselect\n  (select json_agg(row_to_json(${sqlAlias})) from ${sqlAlias}) as all_data,\n  (select max(age) from ${sqlAlias}) as max_age\n`;\n\n// sql.compile compiles the query into an SQL statement and a list of values\nconst { text, values } = sql.compile(query);\n\nconsole.log(text);\n/* ->\nwith __local_0__ as (select \"user\".\"name\", \"user\".\"age\", \"user\".\"height\" from \"user\" where created_at > NOW() - interval '3 years' and age > $1)\nselect\n  (select json_agg(row_to_json(__local_0__)) from __local_0__) as all_data,\n  (select max(age) from __local_0__) as max_age\n*/\n\nconsole.log(values); // [ 22 ]\n\n// Then to run the query using `pg` module, do something like:\n// const { rows } = await pg.query(text, values);\n```\n\n## API\n\n### `` sql.query`...` ``\n\nBuilds part of (or the whole of) an SQL query, safely interpretting the embedded expressions. If a non `sql.*` expression is passed in, e.g.:\n\n<!-- skip-example -->\n\n```js\nsql.query`select ${1}`;\n```\n\nthen an error will be thrown.\n\n### `sql.identifier(ident, ...)`\n\nRepresents a safely escaped SQL identifier; if multiple arguments are passed\nthen each will be escaped and then they will be joined with dots (e.g.\n`\"schema\".\"table\".\"column\"`).\n\n### `sql.value(val)`\n\nRepresents an SQL value, will be replaced with a placeholder and the value collected up at compile time.\n\n### `sql.literal(val)`\n\nAs `sql.value`, but in the case of very simple values may write them directly\nto the SQL statement rather than using a placeholder. Should only be used with\ndata that is not sensitive and is trusted (not user-provided data), e.g. for\nthe key arguments to `json_build_object(key, val, key, val, ...)` which you\nhave produced.\n\n### `sql.join(arrayOfFragments, delimeter)`\n\nJoins an array of sql.query values using the delimeter (which is treated as a raw SQL string); e.g.\n\n```js\nconst arrayOfSqlFields = [\"a\", \"b\", \"c\", \"d\"].map(n => sql.identifier(n));\nsql.query`select ${sql.join(arrayOfSqlFields, \", \")}`; // -> select \"a\", \"b\", \"c\", \"d\"\n\nconst arrayOfSqlConditions = [\n  sql.query`a = 1`,\n  sql.query`b = 2`,\n  sql.query`c = 3`,\n];\nsql.query`where (${sql.join(arrayOfSqlConditions, \") and (\")})`; // -> where (a = 1) and (b = 2) and (c = 3)\n\nconst fragments = [\n  { alias: \"name\", sqlFragment: sql.identifier(\"user\", \"name\") },\n  { alias: \"age\", sqlFragment: sql.identifier(\"user\", \"age\") },\n];\nsql.query`\n  json_build_object(\n    ${sql.join(\n      fragments.map(\n        ({ sqlFragment, alias }) =>\n          sql.query`${sql.literal(alias)}, ${sqlFragment}`\n      ),\n      \",\\n\"\n    )}\n  )`;\n\nconst arrayOfSqlInnerJoins = [\n  sql.query`inner join bar on (bar.foo_id = foo.id)`,\n  sql.query`inner join baz on (baz.bar_id = bar.id)`,\n];\nsql.query`select * from foo ${sql.join(arrayOfSqlInnerJoins, \" \")}`;\n// select * from foo inner join bar on (bar.foo_id = foo.id) inner join baz on (baz.bar_id = bar.id)\n```\n\n### `sql.compile(query)`\n\nCompiles the query into an SQL statement and a list of values, ready to be executed\n\n```js\nconst query = sql.query`...`;\nconst { text, values } = sql.compile(query);\n\n// const { rows } = await pg.query(text, values);\n```\n\n## History\n\nThis is a replacement for [@calebmer's\n`pg-sql`](https://www.npmjs.com/package/pg-sql), combining the additional work\nthat was done to it [in\npostgraphql](https://github.com/postgraphql/postgraphql/blob/9c36d7e9b9ad74e665de18964fd2554f9f639903/src/postgres/utils/sql.ts)\nand offering the following enhancements:\n\n- Better development experience for people not using Flow/TypeScript (throws\n  errors a lot earlier allowing you to catch issues at the source)\n- Slightly more helpful error messages\n- Uses a symbol-key on the query nodes to protect against an object\n  accidentally being inserted verbatim and being treated as valid (because\n  every Symbol is unique an attacker would need control of the code to get a\n  reference to the Symbol in order to set it on an object (it cannot be\n  serialised/deserialised via JSON or any other medium), and if the attacker\n  has control of the code then you've already lost)\n- Adds `sql.literal` which is similar to `sql.value` but when used with simple\n  values can write the valid direct to the SQL statement. **USE WITH CAUTION**.\n  The purpose for this is if you are using _trusted_ values (e.g. for the keys\n  to\n  [`json_build_object(...)`](https://www.postgresql.org/docs/9.6/static/functions-json.html))\n  then debugging your SQL becomes a lot easier because fewer placeholders are\n  used.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/graphile/graphile-engine.git"
  },
  "scripts": {
    "jest": "jest",
    "prepack": "tsc",
    "test": "tsc && node node8plus/index.js && jest && markdown-doctest",
    "test:docs": "markdown-doctest",
    "test:u": "tsc && node node8plus/index.js && jest -u && markdown-doctest",
    "watch": "tsc --watch"
  },
  "types": "node8plus/index.d.ts",
  "version": "4.4.5"
}
